
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000404  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000534  0800053c  0001053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000534  08000534  0001053c  2**0
                  CONTENTS
  4 .ARM          00000000  08000534  08000534  0001053c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000534  0800053c  0001053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000534  08000534  00010534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000538  08000538  00010538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800053c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800053c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001053c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018f8  00000000  00000000  00010565  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003fb  00000000  00000000  00011e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000003c4  00000000  00000000  00012258  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000b0  00000000  00000000  00012620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  000126d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001b06  00000000  00000000  00012758  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000ccd  00000000  00000000  0001425e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000076dc  00000000  00000000  00014f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c607  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001fc  00000000  00000000  0001c684  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800051c 	.word	0x0800051c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800051c 	.word	0x0800051c

08000170 <mywait>:
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



void mywait(int x){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	volatile uint32_t z,y;
	for(y=0;y<x;y++)
 8000178:	2300      	movs	r3, #0
 800017a:	60bb      	str	r3, [r7, #8]
 800017c:	e00b      	b.n	8000196 <mywait+0x26>
	{
		for(z=0;z<255;z++);
 800017e:	2300      	movs	r3, #0
 8000180:	60fb      	str	r3, [r7, #12]
 8000182:	e002      	b.n	800018a <mywait+0x1a>
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	3301      	adds	r3, #1
 8000188:	60fb      	str	r3, [r7, #12]
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <mywait+0x14>
	for(y=0;y<x;y++)
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	3301      	adds	r3, #1
 8000194:	60bb      	str	r3, [r7, #8]
 8000196:	68ba      	ldr	r2, [r7, #8]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <mywait+0xe>

	}
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <main>:



int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	// Enable PortA and PortB clocks
	RCC_GPIOA_CLK_ENABLE();
 80001ae:	4b2d      	ldr	r3, [pc, #180]	; (8000264 <main+0xbc>)
 80001b0:	699b      	ldr	r3, [r3, #24]
 80001b2:	4a2c      	ldr	r2, [pc, #176]	; (8000264 <main+0xbc>)
 80001b4:	f043 0304 	orr.w	r3, r3, #4
 80001b8:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_ENABLE();
 80001ba:	4b2a      	ldr	r3, [pc, #168]	; (8000264 <main+0xbc>)
 80001bc:	699b      	ldr	r3, [r3, #24]
 80001be:	4a29      	ldr	r2, [pc, #164]	; (8000264 <main+0xbc>)
 80001c0:	f043 0308 	orr.w	r3, r3, #8
 80001c4:	6193      	str	r3, [r2, #24]
	GPIO_PinConfig_t PIN_CONFIG;
	PIN_CONFIG.GPIO_PinNumber=GPIO_PIN_1;
 80001c6:	2302      	movs	r3, #2
 80001c8:	80bb      	strh	r3, [r7, #4]
	PIN_CONFIG.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 80001ca:	2301      	movs	r3, #1
 80001cc:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PIN_CONFIG);
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	4619      	mov	r1, r3
 80001d2:	4825      	ldr	r0, [pc, #148]	; (8000268 <main+0xc0>)
 80001d4:	f000 f8d8 	bl	8000388 <MCAL_GPIO_Init>

	PIN_CONFIG.GPIO_PinNumber=GPIO_PIN_1;
 80001d8:	2302      	movs	r3, #2
 80001da:	80bb      	strh	r3, [r7, #4]
	PIN_CONFIG.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80001dc:	2304      	movs	r3, #4
 80001de:	71bb      	strb	r3, [r7, #6]
	PIN_CONFIG.GPIO_Output_Speed= GPPIO_SPEED_10M;
 80001e0:	2301      	movs	r3, #1
 80001e2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PIN_CONFIG);
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	4619      	mov	r1, r3
 80001e8:	4820      	ldr	r0, [pc, #128]	; (800026c <main+0xc4>)
 80001ea:	f000 f8cd 	bl	8000388 <MCAL_GPIO_Init>

	PIN_CONFIG.GPIO_PinNumber=GPIO_PIN_13;
 80001ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f2:	80bb      	strh	r3, [r7, #4]
	PIN_CONFIG.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 80001f4:	2301      	movs	r3, #1
 80001f6:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PIN_CONFIG);
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	4619      	mov	r1, r3
 80001fc:	481a      	ldr	r0, [pc, #104]	; (8000268 <main+0xc0>)
 80001fe:	f000 f8c3 	bl	8000388 <MCAL_GPIO_Init>

	PIN_CONFIG.GPIO_PinNumber=GPIO_PIN_13;
 8000202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000206:	80bb      	strh	r3, [r7, #4]
	PIN_CONFIG.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000208:	2304      	movs	r3, #4
 800020a:	71bb      	strb	r3, [r7, #6]
	PIN_CONFIG.GPIO_Output_Speed= GPPIO_SPEED_10M;
 800020c:	2301      	movs	r3, #1
 800020e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PIN_CONFIG);
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	4619      	mov	r1, r3
 8000214:	4815      	ldr	r0, [pc, #84]	; (800026c <main+0xc4>)
 8000216:	f000 f8b7 	bl	8000388 <MCAL_GPIO_Init>

	while(1){

		if ( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 800021a:	2102      	movs	r1, #2
 800021c:	4812      	ldr	r0, [pc, #72]	; (8000268 <main+0xc0>)
 800021e:	f000 f930 	bl	8000482 <MCAL_GPIO_ReadPin>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d10b      	bne.n	8000240 <main+0x98>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000228:	2102      	movs	r1, #2
 800022a:	4810      	ldr	r0, [pc, #64]	; (800026c <main+0xc4>)
 800022c:	f000 f940 	bl	80004b0 <MCAL_GPIO_TogglePin>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)  == 0);
 8000230:	bf00      	nop
 8000232:	2102      	movs	r1, #2
 8000234:	480c      	ldr	r0, [pc, #48]	; (8000268 <main+0xc0>)
 8000236:	f000 f924 	bl	8000482 <MCAL_GPIO_ReadPin>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d0f8      	beq.n	8000232 <main+0x8a>
		}

		if ( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13)  == 1 )
 8000240:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000244:	4808      	ldr	r0, [pc, #32]	; (8000268 <main+0xc0>)
 8000246:	f000 f91c 	bl	8000482 <MCAL_GPIO_ReadPin>
 800024a:	4603      	mov	r3, r0
 800024c:	2b01      	cmp	r3, #1
 800024e:	d104      	bne.n	800025a <main+0xb2>
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000250:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000254:	4805      	ldr	r0, [pc, #20]	; (800026c <main+0xc4>)
 8000256:	f000 f92b 	bl	80004b0 <MCAL_GPIO_TogglePin>

		}

//		if ( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == 1)
//			MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_set);
		mywait(1);
 800025a:	2001      	movs	r0, #1
 800025c:	f7ff ff88 	bl	8000170 <mywait>
		if ( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 8000260:	e7db      	b.n	800021a <main+0x72>
 8000262:	bf00      	nop
 8000264:	40021000 	.word	0x40021000
 8000268:	40010800 	.word	0x40010800
 800026c:	40010c00 	.word	0x40010c00

08000270 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000272:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000274:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000278:	480c      	ldr	r0, [pc, #48]	; (80002ac <LoopForever+0x6>)
  ldr r1, =_edata
 800027a:	490d      	ldr	r1, [pc, #52]	; (80002b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800027c:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <LoopForever+0xe>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000280:	e002      	b.n	8000288 <LoopCopyDataInit>

08000282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000286:	3304      	adds	r3, #4

08000288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800028c:	d3f9      	bcc.n	8000282 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000290:	4c0a      	ldr	r4, [pc, #40]	; (80002bc <LoopForever+0x16>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000294:	e001      	b.n	800029a <LoopFillZerobss>

08000296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000298:	3204      	adds	r2, #4

0800029a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800029c:	d3fb      	bcc.n	8000296 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029e:	f000 f919 	bl	80004d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a2:	f7ff ff81 	bl	80001a8 <main>

080002a6 <LoopForever>:

LoopForever:
    b LoopForever
 80002a6:	e7fe      	b.n	80002a6 <LoopForever>
  ldr   r0, =_estack
 80002a8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b4:	0800053c 	.word	0x0800053c
  ldr r2, =_sbss
 80002b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002bc:	2000001c 	.word	0x2000001c

080002c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <ADC1_2_IRQHandler>

080002c2 <Get_CRLH_Position>:

#include "Stm32_F103C6_GPIO_drivers.h"


uint8_t Get_CRLH_Position(uint16_t PinNummber)
{
 80002c2:	b480      	push	{r7}
 80002c4:	b083      	sub	sp, #12
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	4603      	mov	r3, r0
 80002ca:	80fb      	strh	r3, [r7, #6]
	switch(PinNummber){
 80002cc:	88fb      	ldrh	r3, [r7, #6]
 80002ce:	2b80      	cmp	r3, #128	; 0x80
 80002d0:	d042      	beq.n	8000358 <Get_CRLH_Position+0x96>
 80002d2:	2b80      	cmp	r3, #128	; 0x80
 80002d4:	dc11      	bgt.n	80002fa <Get_CRLH_Position+0x38>
 80002d6:	2b08      	cmp	r3, #8
 80002d8:	d036      	beq.n	8000348 <Get_CRLH_Position+0x86>
 80002da:	2b08      	cmp	r3, #8
 80002dc:	dc06      	bgt.n	80002ec <Get_CRLH_Position+0x2a>
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d02e      	beq.n	8000340 <Get_CRLH_Position+0x7e>
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	d02e      	beq.n	8000344 <Get_CRLH_Position+0x82>
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d028      	beq.n	800033c <Get_CRLH_Position+0x7a>
 80002ea:	e047      	b.n	800037c <Get_CRLH_Position+0xba>
 80002ec:	2b20      	cmp	r3, #32
 80002ee:	d02f      	beq.n	8000350 <Get_CRLH_Position+0x8e>
 80002f0:	2b40      	cmp	r3, #64	; 0x40
 80002f2:	d02f      	beq.n	8000354 <Get_CRLH_Position+0x92>
 80002f4:	2b10      	cmp	r3, #16
 80002f6:	d029      	beq.n	800034c <Get_CRLH_Position+0x8a>
 80002f8:	e040      	b.n	800037c <Get_CRLH_Position+0xba>
 80002fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80002fe:	d033      	beq.n	8000368 <Get_CRLH_Position+0xa6>
 8000300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000304:	dc09      	bgt.n	800031a <Get_CRLH_Position+0x58>
 8000306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800030a:	d029      	beq.n	8000360 <Get_CRLH_Position+0x9e>
 800030c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000310:	d028      	beq.n	8000364 <Get_CRLH_Position+0xa2>
 8000312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000316:	d021      	beq.n	800035c <Get_CRLH_Position+0x9a>
 8000318:	e030      	b.n	800037c <Get_CRLH_Position+0xba>
 800031a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800031e:	d027      	beq.n	8000370 <Get_CRLH_Position+0xae>
 8000320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000324:	dc03      	bgt.n	800032e <Get_CRLH_Position+0x6c>
 8000326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800032a:	d01f      	beq.n	800036c <Get_CRLH_Position+0xaa>
 800032c:	e026      	b.n	800037c <Get_CRLH_Position+0xba>
 800032e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000332:	d01f      	beq.n	8000374 <Get_CRLH_Position+0xb2>
 8000334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000338:	d01e      	beq.n	8000378 <Get_CRLH_Position+0xb6>
 800033a:	e01f      	b.n	800037c <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 800033c:	2300      	movs	r3, #0
 800033e:	e01e      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000340:	2304      	movs	r3, #4
 8000342:	e01c      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000344:	2308      	movs	r3, #8
 8000346:	e01a      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000348:	230c      	movs	r3, #12
 800034a:	e018      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800034c:	2310      	movs	r3, #16
 800034e:	e016      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000350:	2314      	movs	r3, #20
 8000352:	e014      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000354:	2318      	movs	r3, #24
 8000356:	e012      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000358:	231c      	movs	r3, #28
 800035a:	e010      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 800035c:	2300      	movs	r3, #0
 800035e:	e00e      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000360:	2304      	movs	r3, #4
 8000362:	e00c      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000364:	2308      	movs	r3, #8
 8000366:	e00a      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000368:	230c      	movs	r3, #12
 800036a:	e008      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800036c:	2310      	movs	r3, #16
 800036e:	e006      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000370:	2314      	movs	r3, #20
 8000372:	e004      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000374:	2318      	movs	r3, #24
 8000376:	e002      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000378:	231c      	movs	r3, #28
 800037a:	e000      	b.n	800037e <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800037c:	2300      	movs	r3, #0
}
 800037e:	4618      	mov	r0, r3
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <MCAL_GPIO_Init>:
 * @param [in] 	- GPIOX, GPIO_PinConfig_t PinConfig
 * @param [in] 	-PinConfig
 * @retval 		-none
 * Note			-
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOX, GPIO_PinConfig_t *PinConfig ){
 8000388:	b590      	push	{r4, r7, lr}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
	//Port configuration register low((GPIOx_CRL)) configure pin 0 >>> 7
	//Port configuration register high((GPIOx_CRH)) configure pin 8 >>> 15
	volatile uint32_t *configRegister= NULL;
 8000392:	2300      	movs	r3, #0
 8000394:	60bb      	str	r3, [r7, #8]
	uint8_t Pinconfig;
	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?  &GPIOX->CRL :  &GPIOX->CRH;
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	2bff      	cmp	r3, #255	; 0xff
 800039c:	d801      	bhi.n	80003a2 <MCAL_GPIO_Init+0x1a>
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	e001      	b.n	80003a6 <MCAL_GPIO_Init+0x1e>
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3304      	adds	r3, #4
 80003a6:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0]  MODE[1:0]
	*configRegister &= ~(0b1111<< Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	881b      	ldrh	r3, [r3, #0]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff ff88 	bl	80002c2 <Get_CRLH_Position>
 80003b2:	4603      	mov	r3, r0
 80003b4:	461a      	mov	r2, r3
 80003b6:	230f      	movs	r3, #15
 80003b8:	4093      	lsls	r3, r2
 80003ba:	43da      	mvns	r2, r3
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	401a      	ands	r2, r3
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	601a      	str	r2, [r3, #0]

	//if pin is output
	if (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP || PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_Mode == GPIO_MODE_AF_OUTPUT_PP|| PinConfig->GPIO_Mode == GPIO_MODE_AF_OUTPUT_OD )
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	789b      	ldrb	r3, [r3, #2]
 80003ca:	2b04      	cmp	r3, #4
 80003cc:	d00b      	beq.n	80003e6 <MCAL_GPIO_Init+0x5e>
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	789b      	ldrb	r3, [r3, #2]
 80003d2:	2b05      	cmp	r3, #5
 80003d4:	d007      	beq.n	80003e6 <MCAL_GPIO_Init+0x5e>
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	789b      	ldrb	r3, [r3, #2]
 80003da:	2b06      	cmp	r3, #6
 80003dc:	d003      	beq.n	80003e6 <MCAL_GPIO_Init+0x5e>
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	789b      	ldrb	r3, [r3, #2]
 80003e2:	2b07      	cmp	r3, #7
 80003e4:	d10e      	bne.n	8000404 <MCAL_GPIO_Init+0x7c>
	{
		Pinconfig = (((PinConfig->GPIO_Mode - 4)	 << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F;
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	789b      	ldrb	r3, [r3, #2]
 80003ea:	3b04      	subs	r3, #4
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	b25a      	sxtb	r2, r3
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	78db      	ldrb	r3, [r3, #3]
 80003f4:	b25b      	sxtb	r3, r3
 80003f6:	4313      	orrs	r3, r2
 80003f8:	b25b      	sxtb	r3, r3
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	f003 030f 	and.w	r3, r3, #15
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	e02c      	b.n	800045e <MCAL_GPIO_Init+0xd6>
	}
	else
	{
		if ( PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO||  PinConfig->GPIO_Mode == GPIO_MODE_Analog)
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	789b      	ldrb	r3, [r3, #2]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d003      	beq.n	8000414 <MCAL_GPIO_Init+0x8c>
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	789b      	ldrb	r3, [r3, #2]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d107      	bne.n	8000424 <MCAL_GPIO_Init+0x9c>
		{
			Pinconfig= (PinConfig->GPIO_Mode <<2) & 0x0f;
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	789b      	ldrb	r3, [r3, #2]
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	b2db      	uxtb	r3, r3
 800041c:	f003 030f 	and.w	r3, r3, #15
 8000420:	73fb      	strb	r3, [r7, #15]
 8000422:	e01c      	b.n	800045e <MCAL_GPIO_Init+0xd6>
		}
		else if(PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT)
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	789b      	ldrb	r3, [r3, #2]
 8000428:	2b08      	cmp	r3, #8
 800042a:	d102      	bne.n	8000432 <MCAL_GPIO_Init+0xaa>
		{
			Pinconfig=( GPIO_MODE_INPUT_FLO << 2) & 0x0f;
 800042c:	2304      	movs	r3, #4
 800042e:	73fb      	strb	r3, [r7, #15]
 8000430:	e015      	b.n	800045e <MCAL_GPIO_Init+0xd6>
		}
		else {
			Pinconfig= (GPIO_MODE_INPUT_PU <<2) & 0x0f;
 8000432:	230c      	movs	r3, #12
 8000434:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	789b      	ldrb	r3, [r3, #2]
 800043a:	2b03      	cmp	r3, #3
 800043c:	d107      	bne.n	800044e <MCAL_GPIO_Init+0xc6>
				GPIOX->ODR |= PinConfig->GPIO_PinNumber;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	68db      	ldr	r3, [r3, #12]
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	8812      	ldrh	r2, [r2, #0]
 8000446:	431a      	orrs	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	e007      	b.n	800045e <MCAL_GPIO_Init+0xd6>
			else
				GPIOX->ODR &= ~(PinConfig->GPIO_PinNumber);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	68db      	ldr	r3, [r3, #12]
 8000452:	683a      	ldr	r2, [r7, #0]
 8000454:	8812      	ldrh	r2, [r2, #0]
 8000456:	43d2      	mvns	r2, r2
 8000458:	401a      	ands	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	60da      	str	r2, [r3, #12]

		}

	}

	*configRegister |=  Pinconfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber);
 800045e:	7bfc      	ldrb	r4, [r7, #15]
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff ff2c 	bl	80002c2 <Get_CRLH_Position>
 800046a:	4603      	mov	r3, r0
 800046c:	fa04 f203 	lsl.w	r2, r4, r3
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	431a      	orrs	r2, r3
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	601a      	str	r2, [r3, #0]

}
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bd90      	pop	{r4, r7, pc}

08000482 <MCAL_GPIO_ReadPin>:
 * @param [in] 	- PinNummber
 * @retval 		-the input read pin based on @ref GPIO_PIN_state
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOX, uint16_t PinNummber)
{
 8000482:	b480      	push	{r7}
 8000484:	b085      	sub	sp, #20
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	460b      	mov	r3, r1
 800048c:	807b      	strh	r3, [r7, #2]

	uint8_t bitStatus;
	if( ((GPIOX->IDR) & (PinNummber)) != GPIO_PIN_reset )
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	689a      	ldr	r2, [r3, #8]
 8000492:	887b      	ldrh	r3, [r7, #2]
 8000494:	4013      	ands	r3, r2
 8000496:	2b00      	cmp	r3, #0
 8000498:	d002      	beq.n	80004a0 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus= GPIO_PIN_set;
 800049a:	2301      	movs	r3, #1
 800049c:	73fb      	strb	r3, [r7, #15]
 800049e:	e001      	b.n	80004a4 <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		bitStatus= GPIO_PIN_reset;
 80004a0:	2300      	movs	r3, #0
 80004a2:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <MCAL_GPIO_TogglePin>:
 * @brief 		-toggle specific GPIO PIN
 * @param [in] 	- GPIOX
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOX, uint16_t PinNummber){
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	807b      	strh	r3, [r7, #2]

	GPIOX->ODR ^= (uint32_t)PinNummber;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	887b      	ldrh	r3, [r7, #2]
 80004c2:	405a      	eors	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	60da      	str	r2, [r3, #12]

}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
	...

080004d4 <__libc_init_array>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	2500      	movs	r5, #0
 80004d8:	4e0c      	ldr	r6, [pc, #48]	; (800050c <__libc_init_array+0x38>)
 80004da:	4c0d      	ldr	r4, [pc, #52]	; (8000510 <__libc_init_array+0x3c>)
 80004dc:	1ba4      	subs	r4, r4, r6
 80004de:	10a4      	asrs	r4, r4, #2
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	d109      	bne.n	80004f8 <__libc_init_array+0x24>
 80004e4:	f000 f81a 	bl	800051c <_init>
 80004e8:	2500      	movs	r5, #0
 80004ea:	4e0a      	ldr	r6, [pc, #40]	; (8000514 <__libc_init_array+0x40>)
 80004ec:	4c0a      	ldr	r4, [pc, #40]	; (8000518 <__libc_init_array+0x44>)
 80004ee:	1ba4      	subs	r4, r4, r6
 80004f0:	10a4      	asrs	r4, r4, #2
 80004f2:	42a5      	cmp	r5, r4
 80004f4:	d105      	bne.n	8000502 <__libc_init_array+0x2e>
 80004f6:	bd70      	pop	{r4, r5, r6, pc}
 80004f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004fc:	4798      	blx	r3
 80004fe:	3501      	adds	r5, #1
 8000500:	e7ee      	b.n	80004e0 <__libc_init_array+0xc>
 8000502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000506:	4798      	blx	r3
 8000508:	3501      	adds	r5, #1
 800050a:	e7f2      	b.n	80004f2 <__libc_init_array+0x1e>
 800050c:	08000534 	.word	0x08000534
 8000510:	08000534 	.word	0x08000534
 8000514:	08000534 	.word	0x08000534
 8000518:	08000538 	.word	0x08000538

0800051c <_init>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	bf00      	nop
 8000520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000522:	bc08      	pop	{r3}
 8000524:	469e      	mov	lr, r3
 8000526:	4770      	bx	lr

08000528 <_fini>:
 8000528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052a:	bf00      	nop
 800052c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052e:	bc08      	pop	{r3}
 8000530:	469e      	mov	lr, r3
 8000532:	4770      	bx	lr
