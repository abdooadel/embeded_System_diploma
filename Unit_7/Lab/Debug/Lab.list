
Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000200  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000330  08000338  00010338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000330  08000330  00010338  2**0
                  CONTENTS
  4 .ARM          00000000  08000330  08000330  00010338  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000330  08000338  00010338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000330  08000330  00010330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000334  08000334  00010334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000338  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000338  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010338  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a0c  00000000  00000000  00010361  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001b8  00000000  00000000  00010d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000088  00000000  00000000  00010f25  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000050  00000000  00000000  00010fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000038  00000000  00000000  00011000  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001d87  00000000  00000000  00011038  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000066a  00000000  00000000  00012dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000817e  00000000  00000000  00013429  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001b5a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000080  00000000  00000000  0001b624  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000318 	.word	0x08000318

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000318 	.word	0x08000318

08000170 <mywait>:
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



void mywait(int x){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	vuint32_t z,y;
	for(y=0;y<x;y++)
 8000178:	2300      	movs	r3, #0
 800017a:	60bb      	str	r3, [r7, #8]
 800017c:	e00b      	b.n	8000196 <mywait+0x26>
	{
		for(z=0;z<255;z++);
 800017e:	2300      	movs	r3, #0
 8000180:	60fb      	str	r3, [r7, #12]
 8000182:	e002      	b.n	800018a <mywait+0x1a>
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	3301      	adds	r3, #1
 8000188:	60fb      	str	r3, [r7, #12]
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <mywait+0x14>
	for(y=0;y<x;y++)
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	3301      	adds	r3, #1
 8000194:	60bb      	str	r3, [r7, #8]
 8000196:	68ba      	ldr	r2, [r7, #8]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <mywait+0xe>

	}
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <main>:



int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	// Enable PortA and PortB clocks
	RCC_APB2ENR |= 1<<2;
 80001ac:	4b2c      	ldr	r3, [pc, #176]	; (8000260 <main+0xb8>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a2b      	ldr	r2, [pc, #172]	; (8000260 <main+0xb8>)
 80001b2:	f043 0304 	orr.w	r3, r3, #4
 80001b6:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |= 1<<3;
 80001b8:	4b29      	ldr	r3, [pc, #164]	; (8000260 <main+0xb8>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a28      	ldr	r2, [pc, #160]	; (8000260 <main+0xb8>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6013      	str	r3, [r2, #0]

	GPIOA_CRL =0x0;
 80001c4:	4b27      	ldr	r3, [pc, #156]	; (8000264 <main+0xbc>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
	GPIOB_CRL =0x0;
 80001ca:	4b27      	ldr	r3, [pc, #156]	; (8000268 <main+0xc0>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]

	// PA1 input HZ
	GPIOA_CRL |= 1<<6;
 80001d0:	4b24      	ldr	r3, [pc, #144]	; (8000264 <main+0xbc>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a23      	ldr	r2, [pc, #140]	; (8000264 <main+0xbc>)
 80001d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001da:	6013      	str	r3, [r2, #0]

	// PA13 input HZ
	GPIOA_CRH &= ~(0b11<<20);
 80001dc:	4b23      	ldr	r3, [pc, #140]	; (800026c <main+0xc4>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a22      	ldr	r2, [pc, #136]	; (800026c <main+0xc4>)
 80001e2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80001e6:	6013      	str	r3, [r2, #0]
	GPIOA_CRH  |= 0b11<<22;
 80001e8:	4b20      	ldr	r3, [pc, #128]	; (800026c <main+0xc4>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a1f      	ldr	r2, [pc, #124]	; (800026c <main+0xc4>)
 80001ee:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80001f2:	6013      	str	r3, [r2, #0]

	// PB1 output push-pull
	GPIOB_CRL |= 0b01<<4;
 80001f4:	4b1c      	ldr	r3, [pc, #112]	; (8000268 <main+0xc0>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a1b      	ldr	r2, [pc, #108]	; (8000268 <main+0xc0>)
 80001fa:	f043 0310 	orr.w	r3, r3, #16
 80001fe:	6013      	str	r3, [r2, #0]

	// PB13 output push-pull
	GPIOB_CRH  |= 0b01<<20;
 8000200:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <main+0xc8>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a1a      	ldr	r2, [pc, #104]	; (8000270 <main+0xc8>)
 8000206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800020a:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &= ~(0b11<<22);
 800020c:	4b18      	ldr	r3, [pc, #96]	; (8000270 <main+0xc8>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a17      	ldr	r2, [pc, #92]	; (8000270 <main+0xc8>)
 8000212:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000216:	6013      	str	r3, [r2, #0]

	while(1){
		if ((GPIOA_IDR & 1<<1)>>1 == 0)
 8000218:	4b16      	ldr	r3, [pc, #88]	; (8000274 <main+0xcc>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f003 0302 	and.w	r3, r3, #2
 8000220:	2b00      	cmp	r3, #0
 8000222:	d10c      	bne.n	800023e <main+0x96>
		{
			GPIOB_ODR ^=  1<<1;
 8000224:	4b14      	ldr	r3, [pc, #80]	; (8000278 <main+0xd0>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a13      	ldr	r2, [pc, #76]	; (8000278 <main+0xd0>)
 800022a:	f083 0302 	eor.w	r3, r3, #2
 800022e:	6013      	str	r3, [r2, #0]
			while((GPIOA_IDR & 1<<1)>>1 == 0);
 8000230:	bf00      	nop
 8000232:	4b10      	ldr	r3, [pc, #64]	; (8000274 <main+0xcc>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f003 0302 	and.w	r3, r3, #2
 800023a:	2b00      	cmp	r3, #0
 800023c:	d0f9      	beq.n	8000232 <main+0x8a>
		}

		if ( (GPIOA_IDR & 1<<13) >>13 == 1)
 800023e:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <main+0xcc>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	0b5b      	lsrs	r3, r3, #13
 8000244:	f003 0301 	and.w	r3, r3, #1
 8000248:	2b01      	cmp	r3, #1
 800024a:	d105      	bne.n	8000258 <main+0xb0>
		{
			GPIOB_ODR ^=  1<<13;
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <main+0xd0>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a09      	ldr	r2, [pc, #36]	; (8000278 <main+0xd0>)
 8000252:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000256:	6013      	str	r3, [r2, #0]


		}

		mywait(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f7ff ff89 	bl	8000170 <mywait>
		if ((GPIOA_IDR & 1<<1)>>1 == 0)
 800025e:	e7db      	b.n	8000218 <main+0x70>
 8000260:	40021018 	.word	0x40021018
 8000264:	40010800 	.word	0x40010800
 8000268:	40010c00 	.word	0x40010c00
 800026c:	40010804 	.word	0x40010804
 8000270:	40010c04 	.word	0x40010c04
 8000274:	40010808 	.word	0x40010808
 8000278:	40010c0c 	.word	0x40010c0c

0800027c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000280:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000284:	480c      	ldr	r0, [pc, #48]	; (80002b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000286:	490d      	ldr	r1, [pc, #52]	; (80002bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000288:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <LoopForever+0xe>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800028c:	e002      	b.n	8000294 <LoopCopyDataInit>

0800028e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000292:	3304      	adds	r3, #4

08000294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000298:	d3f9      	bcc.n	800028e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029a:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800029c:	4c0a      	ldr	r4, [pc, #40]	; (80002c8 <LoopForever+0x16>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a0:	e001      	b.n	80002a6 <LoopFillZerobss>

080002a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a4:	3204      	adds	r2, #4

080002a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a8:	d3fb      	bcc.n	80002a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002aa:	f000 f811 	bl	80002d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ae:	f7ff ff7b 	bl	80001a8 <main>

080002b2 <LoopForever>:

LoopForever:
    b LoopForever
 80002b2:	e7fe      	b.n	80002b2 <LoopForever>
  ldr   r0, =_estack
 80002b4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c0:	08000338 	.word	0x08000338
  ldr r2, =_sbss
 80002c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c8:	2000001c 	.word	0x2000001c

080002cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002cc:	e7fe      	b.n	80002cc <ADC1_2_IRQHandler>
	...

080002d0 <__libc_init_array>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	2500      	movs	r5, #0
 80002d4:	4e0c      	ldr	r6, [pc, #48]	; (8000308 <__libc_init_array+0x38>)
 80002d6:	4c0d      	ldr	r4, [pc, #52]	; (800030c <__libc_init_array+0x3c>)
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	10a4      	asrs	r4, r4, #2
 80002dc:	42a5      	cmp	r5, r4
 80002de:	d109      	bne.n	80002f4 <__libc_init_array+0x24>
 80002e0:	f000 f81a 	bl	8000318 <_init>
 80002e4:	2500      	movs	r5, #0
 80002e6:	4e0a      	ldr	r6, [pc, #40]	; (8000310 <__libc_init_array+0x40>)
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <__libc_init_array+0x44>)
 80002ea:	1ba4      	subs	r4, r4, r6
 80002ec:	10a4      	asrs	r4, r4, #2
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d105      	bne.n	80002fe <__libc_init_array+0x2e>
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002f8:	4798      	blx	r3
 80002fa:	3501      	adds	r5, #1
 80002fc:	e7ee      	b.n	80002dc <__libc_init_array+0xc>
 80002fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000302:	4798      	blx	r3
 8000304:	3501      	adds	r5, #1
 8000306:	e7f2      	b.n	80002ee <__libc_init_array+0x1e>
 8000308:	08000330 	.word	0x08000330
 800030c:	08000330 	.word	0x08000330
 8000310:	08000330 	.word	0x08000330
 8000314:	08000334 	.word	0x08000334

08000318 <_init>:
 8000318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031a:	bf00      	nop
 800031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031e:	bc08      	pop	{r3}
 8000320:	469e      	mov	lr, r3
 8000322:	4770      	bx	lr

08000324 <_fini>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	bf00      	nop
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr
