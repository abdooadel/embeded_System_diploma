
LCD_KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000003a6  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b72  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000730  00000000  00000000  000010a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000091b  00000000  00000000  000017d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  000020f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000443c  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000054d  00000000  00000000  00006688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00006bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001312  00000000  00000000  00006c45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	00 00       	nop
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	00 00       	nop
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	00 00       	nop
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	00 00       	nop
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	00 00       	nop
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	00 00       	nop
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	00 00       	nop
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	00 00       	nop
  30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
  32:	00 00       	nop
  34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
  3e:	00 00       	nop
  40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
  42:	00 00       	nop
  44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
  46:	00 00       	nop
  48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
  4e:	00 00       	nop
  50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	8a d1       	rcall	.+788    	; 0x38c <main>
  78:	94 c1       	rjmp	.+808    	; 0x3a2 <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <KEYPAD_INIT>:
char KEYPAD_COLUM[]={C0,C1,C2,C3};
	

void KEYPAD_INIT(void){
	
	KEYPAD_DATA_DIR = 0b11110000;
  7c:	80 ef       	ldi	r24, 0xF0	; 240
  7e:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	82 bb       	out	0x12, r24	; 18
  84:	08 95       	ret

00000086 <KEYPAD_GETCHAR>:
}


char KEYPAD_GETCHAR(void)
{
  86:	4f 92       	push	r4
  88:	5f 92       	push	r5
  8a:	7f 92       	push	r7
  8c:	8f 92       	push	r8
  8e:	9f 92       	push	r9
  90:	af 92       	push	r10
  92:	bf 92       	push	r11
  94:	cf 92       	push	r12
  96:	df 92       	push	r13
  98:	ef 92       	push	r14
  9a:	ff 92       	push	r15
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	0f 2e       	mov	r0, r31
  a6:	f0 e6       	ldi	r31, 0x60	; 96
  a8:	ef 2e       	mov	r14, r31
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	ff 2e       	mov	r15, r31
  ae:	f0 2d       	mov	r31, r0
	int c=0 ,r=0;
	
	for( c=0;c<4;c++)
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	70 e0       	ldi	r23, 0x00	; 0
	{
		SetBit(KEYPAD_PORT,KEYPAD_COLUM[0]);
  b4:	e7 01       	movw	r28, r14
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
		ClearBit(KEYPAD_PORT,KEYPAD_COLUM[c]);	
			for( r=0;r<4;r++)
			{
				if( (ReadBit(KEYPAD_PIN,KEYPAD_ROW[r] ) == 0)  )
				{
					while(ReadBit(KEYPAD_PIN,KEYPAD_ROW[r]) == 0);
  ba:	99 24       	eor	r9, r9
  bc:	93 94       	inc	r9
  be:	81 2c       	mov	r8, r1
  c0:	b9 2c       	mov	r11, r9
  c2:	a8 2c       	mov	r10, r8
{
	int c=0 ,r=0;
	
	for( c=0;c<4;c++)
	{
		SetBit(KEYPAD_PORT,KEYPAD_COLUM[0]);
  c4:	42 b3       	in	r20, 0x12	; 18
  c6:	c9 01       	movw	r24, r18
  c8:	08 80       	ld	r0, Y
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <KEYPAD_GETCHAR+0x4a>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	0a 94       	dec	r0
  d2:	e2 f7       	brpl	.-8      	; 0xcc <KEYPAD_GETCHAR+0x46>
  d4:	84 2b       	or	r24, r20
  d6:	82 bb       	out	0x12, r24	; 18
		SetBit(KEYPAD_PORT,KEYPAD_COLUM[1]);
  d8:	42 b3       	in	r20, 0x12	; 18
  da:	c9 01       	movw	r24, r18
  dc:	09 80       	ldd	r0, Y+1	; 0x01
  de:	02 c0       	rjmp	.+4      	; 0xe4 <KEYPAD_GETCHAR+0x5e>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <KEYPAD_GETCHAR+0x5a>
  e8:	84 2b       	or	r24, r20
  ea:	82 bb       	out	0x12, r24	; 18
		SetBit(KEYPAD_PORT,KEYPAD_COLUM[2]);
  ec:	42 b3       	in	r20, 0x12	; 18
  ee:	c9 01       	movw	r24, r18
  f0:	0a 80       	ldd	r0, Y+2	; 0x02
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <KEYPAD_GETCHAR+0x72>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <KEYPAD_GETCHAR+0x6e>
  fc:	84 2b       	or	r24, r20
  fe:	82 bb       	out	0x12, r24	; 18
		SetBit(KEYPAD_PORT,KEYPAD_COLUM[3]);
 100:	42 b3       	in	r20, 0x12	; 18
 102:	c9 01       	movw	r24, r18
 104:	0b 80       	ldd	r0, Y+3	; 0x03
 106:	02 c0       	rjmp	.+4      	; 0x10c <KEYPAD_GETCHAR+0x86>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <KEYPAD_GETCHAR+0x82>
 110:	84 2b       	or	r24, r20
 112:	82 bb       	out	0x12, r24	; 18

		ClearBit(KEYPAD_PORT,KEYPAD_COLUM[c]);	
 114:	92 b3       	in	r25, 0x12	; 18
 116:	f7 01       	movw	r30, r14
 118:	a9 01       	movw	r20, r18
 11a:	01 90       	ld	r0, Z+
 11c:	02 c0       	rjmp	.+4      	; 0x122 <KEYPAD_GETCHAR+0x9c>
 11e:	44 0f       	add	r20, r20
 120:	55 1f       	adc	r21, r21
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <KEYPAD_GETCHAR+0x98>
 126:	7f 01       	movw	r14, r30
 128:	84 2f       	mov	r24, r20
 12a:	80 95       	com	r24
 12c:	89 23       	and	r24, r25
 12e:	82 bb       	out	0x12, r24	; 18
 130:	a4 e6       	ldi	r26, 0x64	; 100
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	41 2c       	mov	r4, r1
 13a:	51 2c       	mov	r5, r1
 13c:	04 c0       	rjmp	.+8      	; 0x146 <KEYPAD_GETCHAR+0xc0>
 13e:	ff ef       	ldi	r31, 0xFF	; 255
 140:	4f 1a       	sub	r4, r31
 142:	5f 0a       	sbc	r5, r31
 144:	11 96       	adiw	r26, 0x01	; 1
			for( r=0;r<4;r++)
			{
				if( (ReadBit(KEYPAD_PIN,KEYPAD_ROW[r] ) == 0)  )
 146:	80 b3       	in	r24, 0x10	; 16
 148:	fd 01       	movw	r30, r26
 14a:	4f 5f       	subi	r20, 0xFF	; 255
 14c:	5f 4f       	sbci	r21, 0xFF	; 255
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0c 90       	ld	r0, X
 152:	02 c0       	rjmp	.+4      	; 0x158 <KEYPAD_GETCHAR+0xd2>
 154:	95 95       	asr	r25
 156:	87 95       	ror	r24
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <KEYPAD_GETCHAR+0xce>
 15c:	79 2c       	mov	r7, r9
 15e:	6c 01       	movw	r12, r24
 160:	11 e0       	ldi	r17, 0x01	; 1
 162:	c1 22       	and	r12, r17
 164:	dd 24       	eor	r13, r13
 166:	80 fd       	sbrc	r24, 0
 168:	78 2c       	mov	r7, r8
 16a:	70 ba       	out	0x10, r7	; 16
 16c:	cd 28       	or	r12, r13
 16e:	09 f0       	breq	.+2      	; 0x172 <KEYPAD_GETCHAR+0xec>
 170:	55 c0       	rjmp	.+170    	; 0x21c <KEYPAD_GETCHAR+0x196>
				{
					while(ReadBit(KEYPAD_PIN,KEYPAD_ROW[r]) == 0);
 172:	80 b3       	in	r24, 0x10	; 16
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	00 80       	ld	r0, Z
 178:	02 c0       	rjmp	.+4      	; 0x17e <KEYPAD_GETCHAR+0xf8>
 17a:	95 95       	asr	r25
 17c:	87 95       	ror	r24
 17e:	0a 94       	dec	r0
 180:	e2 f7       	brpl	.-8      	; 0x17a <KEYPAD_GETCHAR+0xf4>
 182:	7b 2c       	mov	r7, r11
 184:	6c 01       	movw	r12, r24
 186:	11 e0       	ldi	r17, 0x01	; 1
 188:	c1 22       	and	r12, r17
 18a:	dd 24       	eor	r13, r13
 18c:	80 fd       	sbrc	r24, 0
 18e:	7a 2c       	mov	r7, r10
 190:	70 ba       	out	0x10, r7	; 16
 192:	cd 28       	or	r12, r13
 194:	71 f3       	breq	.-36     	; 0x172 <KEYPAD_GETCHAR+0xec>
					switch(c)
 196:	61 30       	cpi	r22, 0x01	; 1
 198:	71 05       	cpc	r23, r1
 19a:	c9 f0       	breq	.+50     	; 0x1ce <KEYPAD_GETCHAR+0x148>
 19c:	24 f4       	brge	.+8      	; 0x1a6 <KEYPAD_GETCHAR+0x120>
 19e:	61 15       	cp	r22, r1
 1a0:	71 05       	cpc	r23, r1
 1a2:	41 f0       	breq	.+16     	; 0x1b4 <KEYPAD_GETCHAR+0x12e>
 1a4:	3b c0       	rjmp	.+118    	; 0x21c <KEYPAD_GETCHAR+0x196>
 1a6:	62 30       	cpi	r22, 0x02	; 2
 1a8:	71 05       	cpc	r23, r1
 1aa:	f1 f0       	breq	.+60     	; 0x1e8 <KEYPAD_GETCHAR+0x162>
 1ac:	63 30       	cpi	r22, 0x03	; 3
 1ae:	71 05       	cpc	r23, r1
 1b0:	41 f1       	breq	.+80     	; 0x202 <KEYPAD_GETCHAR+0x17c>
 1b2:	34 c0       	rjmp	.+104    	; 0x21c <KEYPAD_GETCHAR+0x196>
 1b4:	c2 01       	movw	r24, r4
					{
						case 0:
						if(r==0) return '7';
 1b6:	41 14       	cp	r4, r1
 1b8:	51 04       	cpc	r5, r1
 1ba:	e1 f1       	breq	.+120    	; 0x234 <KEYPAD_GETCHAR+0x1ae>
						if(r==1) return '4';
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	91 05       	cpc	r25, r1
 1c0:	d9 f1       	breq	.+118    	; 0x238 <KEYPAD_GETCHAR+0x1b2>
						if(r==2) return '1';
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	91 05       	cpc	r25, r1
 1c6:	d1 f1       	breq	.+116    	; 0x23c <KEYPAD_GETCHAR+0x1b6>
						if(r==3) return 'C';
 1c8:	03 97       	sbiw	r24, 0x03	; 3
 1ca:	41 f5       	brne	.+80     	; 0x21c <KEYPAD_GETCHAR+0x196>
 1cc:	39 c0       	rjmp	.+114    	; 0x240 <KEYPAD_GETCHAR+0x1ba>
 1ce:	c2 01       	movw	r24, r4
						break;
						case 1:
						if(r==0) return '8';
 1d0:	41 14       	cp	r4, r1
 1d2:	51 04       	cpc	r5, r1
 1d4:	b9 f1       	breq	.+110    	; 0x244 <KEYPAD_GETCHAR+0x1be>
						if(r==1) return '5';
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 05       	cpc	r25, r1
 1da:	b1 f1       	breq	.+108    	; 0x248 <KEYPAD_GETCHAR+0x1c2>
						if(r==2) return '2';
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	91 05       	cpc	r25, r1
 1e0:	a9 f1       	breq	.+106    	; 0x24c <KEYPAD_GETCHAR+0x1c6>
						if(r==3) return '0';
 1e2:	03 97       	sbiw	r24, 0x03	; 3
 1e4:	d9 f4       	brne	.+54     	; 0x21c <KEYPAD_GETCHAR+0x196>
 1e6:	34 c0       	rjmp	.+104    	; 0x250 <KEYPAD_GETCHAR+0x1ca>
 1e8:	c2 01       	movw	r24, r4
						break;
						case 2:
						if(r==0) return '9';
 1ea:	41 14       	cp	r4, r1
 1ec:	51 04       	cpc	r5, r1
 1ee:	91 f1       	breq	.+100    	; 0x254 <KEYPAD_GETCHAR+0x1ce>
						if(r==1) return '6';
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	91 05       	cpc	r25, r1
 1f4:	89 f1       	breq	.+98     	; 0x258 <KEYPAD_GETCHAR+0x1d2>
						if(r==2) return '3';
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	91 05       	cpc	r25, r1
 1fa:	81 f1       	breq	.+96     	; 0x25c <KEYPAD_GETCHAR+0x1d6>
						if(r==3) return '=';
 1fc:	03 97       	sbiw	r24, 0x03	; 3
 1fe:	71 f4       	brne	.+28     	; 0x21c <KEYPAD_GETCHAR+0x196>
 200:	2f c0       	rjmp	.+94     	; 0x260 <KEYPAD_GETCHAR+0x1da>
 202:	c2 01       	movw	r24, r4
						break;
						case 3:
						if(r==0) return '/';
 204:	41 14       	cp	r4, r1
 206:	51 04       	cpc	r5, r1
 208:	69 f1       	breq	.+90     	; 0x264 <KEYPAD_GETCHAR+0x1de>
						if(r==1) return 'x';
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	91 05       	cpc	r25, r1
 20e:	61 f1       	breq	.+88     	; 0x268 <KEYPAD_GETCHAR+0x1e2>
						if(r==2) return '-';
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	91 05       	cpc	r25, r1
 214:	59 f1       	breq	.+86     	; 0x26c <KEYPAD_GETCHAR+0x1e6>
						if(r==3) return '+';
 216:	03 97       	sbiw	r24, 0x03	; 3
 218:	69 f5       	brne	.+90     	; 0x274 <KEYPAD_GETCHAR+0x1ee>
 21a:	2a c0       	rjmp	.+84     	; 0x270 <KEYPAD_GETCHAR+0x1ea>
		SetBit(KEYPAD_PORT,KEYPAD_COLUM[1]);
		SetBit(KEYPAD_PORT,KEYPAD_COLUM[2]);
		SetBit(KEYPAD_PORT,KEYPAD_COLUM[3]);

		ClearBit(KEYPAD_PORT,KEYPAD_COLUM[c]);	
			for( r=0;r<4;r++)
 21c:	44 30       	cpi	r20, 0x04	; 4
 21e:	51 05       	cpc	r21, r1
 220:	0c f4       	brge	.+2      	; 0x224 <KEYPAD_GETCHAR+0x19e>
 222:	8d cf       	rjmp	.-230    	; 0x13e <KEYPAD_GETCHAR+0xb8>

char KEYPAD_GETCHAR(void)
{
	int c=0 ,r=0;
	
	for( c=0;c<4;c++)
 224:	6f 5f       	subi	r22, 0xFF	; 255
 226:	7f 4f       	sbci	r23, 0xFF	; 255
 228:	64 30       	cpi	r22, 0x04	; 4
 22a:	71 05       	cpc	r23, r1
 22c:	09 f0       	breq	.+2      	; 0x230 <KEYPAD_GETCHAR+0x1aa>
 22e:	4a cf       	rjmp	.-364    	; 0xc4 <KEYPAD_GETCHAR+0x3e>
					}
				}
			}

	}
	return 'A';
 230:	81 e4       	ldi	r24, 0x41	; 65
 232:	25 c0       	rjmp	.+74     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
				{
					while(ReadBit(KEYPAD_PIN,KEYPAD_ROW[r]) == 0);
					switch(c)
					{
						case 0:
						if(r==0) return '7';
 234:	87 e3       	ldi	r24, 0x37	; 55
 236:	23 c0       	rjmp	.+70     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						if(r==1) return '4';
 238:	84 e3       	ldi	r24, 0x34	; 52
 23a:	21 c0       	rjmp	.+66     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						if(r==2) return '1';
 23c:	81 e3       	ldi	r24, 0x31	; 49
 23e:	1f c0       	rjmp	.+62     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						if(r==3) return 'C';
 240:	83 e4       	ldi	r24, 0x43	; 67
 242:	1d c0       	rjmp	.+58     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						break;
						case 1:
						if(r==0) return '8';
 244:	88 e3       	ldi	r24, 0x38	; 56
 246:	1b c0       	rjmp	.+54     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						if(r==1) return '5';
 248:	85 e3       	ldi	r24, 0x35	; 53
 24a:	19 c0       	rjmp	.+50     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						if(r==2) return '2';
 24c:	82 e3       	ldi	r24, 0x32	; 50
 24e:	17 c0       	rjmp	.+46     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						if(r==3) return '0';
 250:	80 e3       	ldi	r24, 0x30	; 48
 252:	15 c0       	rjmp	.+42     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						break;
						case 2:
						if(r==0) return '9';
 254:	89 e3       	ldi	r24, 0x39	; 57
 256:	13 c0       	rjmp	.+38     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						if(r==1) return '6';
 258:	86 e3       	ldi	r24, 0x36	; 54
 25a:	11 c0       	rjmp	.+34     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						if(r==2) return '3';
 25c:	83 e3       	ldi	r24, 0x33	; 51
 25e:	0f c0       	rjmp	.+30     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						if(r==3) return '=';
 260:	8d e3       	ldi	r24, 0x3D	; 61
 262:	0d c0       	rjmp	.+26     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						break;
						case 3:
						if(r==0) return '/';
 264:	8f e2       	ldi	r24, 0x2F	; 47
 266:	0b c0       	rjmp	.+22     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						if(r==1) return 'x';
 268:	88 e7       	ldi	r24, 0x78	; 120
 26a:	09 c0       	rjmp	.+18     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						if(r==2) return '-';
 26c:	8d e2       	ldi	r24, 0x2D	; 45
 26e:	07 c0       	rjmp	.+14     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
						if(r==3) return '+';
 270:	8b e2       	ldi	r24, 0x2B	; 43
 272:	05 c0       	rjmp	.+10     	; 0x27e <KEYPAD_GETCHAR+0x1f8>
		SetBit(KEYPAD_PORT,KEYPAD_COLUM[1]);
		SetBit(KEYPAD_PORT,KEYPAD_COLUM[2]);
		SetBit(KEYPAD_PORT,KEYPAD_COLUM[3]);

		ClearBit(KEYPAD_PORT,KEYPAD_COLUM[c]);	
			for( r=0;r<4;r++)
 274:	44 30       	cpi	r20, 0x04	; 4
 276:	51 05       	cpc	r21, r1
 278:	0c f4       	brge	.+2      	; 0x27c <KEYPAD_GETCHAR+0x1f6>
 27a:	61 cf       	rjmp	.-318    	; 0x13e <KEYPAD_GETCHAR+0xb8>
					}
				}
			}

	}
	return 'A';
 27c:	81 e4       	ldi	r24, 0x41	; 65
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	df 90       	pop	r13
 28c:	cf 90       	pop	r12
 28e:	bf 90       	pop	r11
 290:	af 90       	pop	r10
 292:	9f 90       	pop	r9
 294:	8f 90       	pop	r8
 296:	7f 90       	pop	r7
 298:	5f 90       	pop	r5
 29a:	4f 90       	pop	r4
 29c:	08 95       	ret

0000029e <LCD_config>:
		{
			LCD_WRITE_COMMAND(LCD_CRUSOR_FIRST_ROW);
		}
		if (x==2)
		{
			LCD_WRITE_COMMAND(LCD_CRUSOR_SECOND_ROW);
 29e:	c3 98       	cbi	0x18, 3	; 24
 2a0:	83 ed       	ldi	r24, 0xD3	; 211
 2a2:	90 e3       	ldi	r25, 0x30	; 48
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_config+0x6>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_config+0xc>
 2aa:	00 00       	nop
 2ac:	c3 9a       	sbi	0x18, 3	; 24
 2ae:	08 95       	ret

000002b0 <LCD_busy>:
 2b0:	8a b3       	in	r24, 0x1a	; 26
 2b2:	8f 70       	andi	r24, 0x0F	; 15
 2b4:	8a bb       	out	0x1a, r24	; 26
 2b6:	b9 9a       	sbi	0x17, 1	; 23
 2b8:	ba 9a       	sbi	0x17, 2	; 23
 2ba:	bb 9a       	sbi	0x17, 3	; 23
 2bc:	c2 9a       	sbi	0x18, 2	; 24
 2be:	c1 98       	cbi	0x18, 1	; 24
 2c0:	ee df       	rcall	.-36     	; 0x29e <LCD_config>
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	8a bb       	out	0x1a, r24	; 26
 2c6:	c2 98       	cbi	0x18, 2	; 24
 2c8:	08 95       	ret

000002ca <LCD_WRITE_COMMAND>:
 2ca:	cf 93       	push	r28
 2cc:	c8 2f       	mov	r28, r24
 2ce:	f0 df       	rcall	.-32     	; 0x2b0 <LCD_busy>
 2d0:	8b b3       	in	r24, 0x1b	; 27
 2d2:	8f 70       	andi	r24, 0x0F	; 15
 2d4:	9c 2f       	mov	r25, r28
 2d6:	90 7f       	andi	r25, 0xF0	; 240
 2d8:	89 2b       	or	r24, r25
 2da:	8b bb       	out	0x1b, r24	; 27
 2dc:	c2 98       	cbi	0x18, 2	; 24
 2de:	c1 98       	cbi	0x18, 1	; 24
 2e0:	83 ed       	ldi	r24, 0xD3	; 211
 2e2:	90 e3       	ldi	r25, 0x30	; 48
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <LCD_WRITE_COMMAND+0x1a>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <LCD_WRITE_COMMAND+0x20>
 2ea:	00 00       	nop
 2ec:	d8 df       	rcall	.-80     	; 0x29e <LCD_config>
 2ee:	8b b3       	in	r24, 0x1b	; 27
 2f0:	28 2f       	mov	r18, r24
 2f2:	2f 70       	andi	r18, 0x0F	; 15
 2f4:	30 e1       	ldi	r19, 0x10	; 16
 2f6:	c3 9f       	mul	r28, r19
 2f8:	c0 01       	movw	r24, r0
 2fa:	11 24       	eor	r1, r1
 2fc:	82 2b       	or	r24, r18
 2fe:	8b bb       	out	0x1b, r24	; 27
 300:	c2 98       	cbi	0x18, 2	; 24
 302:	c1 98       	cbi	0x18, 1	; 24
 304:	83 ed       	ldi	r24, 0xD3	; 211
 306:	90 e3       	ldi	r25, 0x30	; 48
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_WRITE_COMMAND+0x3e>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_WRITE_COMMAND+0x44>
 30e:	00 00       	nop
 310:	c6 df       	rcall	.-116    	; 0x29e <LCD_config>
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <LCD_clear_screen>:
	DATA_DIRC_LCD=0xFF;
	ClearBit(LCD_CTRL_PORT,RW_switch);
		}
		
void LCD_clear_screen(void){
	LCD_WRITE_COMMAND(LCD_CLEAR);
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	d8 cf       	rjmp	.-80     	; 0x2ca <LCD_WRITE_COMMAND>
 31a:	08 95       	ret

0000031c <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31c:	87 e8       	ldi	r24, 0x87	; 135
 31e:	93 e1       	ldi	r25, 0x13	; 19
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_init+0x4>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_init+0xa>
 326:	00 00       	nop
		LCD_clear_screen();
		LCD_WRITE_COMMAND(LCD_FUNCTION_8bits_2lines);
	#endif

	#ifdef four_bit_mode
			LCD_busy();
 328:	c3 df       	rcall	.-122    	; 0x2b0 <LCD_busy>
		LCD_WRITE_COMMAND(0x02);
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	ce df       	rcall	.-100    	; 0x2ca <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD_FUNCTION_4bits_2lines);
 32e:	88 e2       	ldi	r24, 0x28	; 40
 330:	cc df       	rcall	.-104    	; 0x2ca <LCD_WRITE_COMMAND>
	#endif
	
	 LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 332:	86 e0       	ldi	r24, 0x06	; 6
 334:	ca df       	rcall	.-108    	; 0x2ca <LCD_WRITE_COMMAND>
	 LCD_WRITE_COMMAND(LCD_CRUSOR_FIRST_ROW);
 336:	80 e8       	ldi	r24, 0x80	; 128
 338:	c8 df       	rcall	.-112    	; 0x2ca <LCD_WRITE_COMMAND>
 33a:	8f e0       	ldi	r24, 0x0F	; 15
	 LCD_WRITE_COMMAND(LCD_DISPLAY_CRUSOR_BLINK);
 33c:	c6 cf       	rjmp	.-116    	; 0x2ca <LCD_WRITE_COMMAND>
 33e:	08 95       	ret

00000340 <LCD_WRITE_CHAR>:
 340:	cf 93       	push	r28
 342:	c8 2f       	mov	r28, r24
	
	
}

void LCD_WRITE_CHAR(unsigned char data){
		LCD_busy();
 344:	b5 df       	rcall	.-150    	; 0x2b0 <LCD_busy>
	LCD_CRUSOR_GOTO_XY(1,0);
	counter=0;
}
#endif
#ifdef four_bit_mode
	ClearBit(LCD_CTRL_PORT,RW_switch);
 346:	c2 98       	cbi	0x18, 2	; 24
	SetBit(LCD_CTRL_PORT,RS_switch);
 348:	c1 9a       	sbi	0x18, 1	; 24
	LCD_PORT= (LCD_PORT & 0x0F) | (data & 0xF0);
 34a:	8b b3       	in	r24, 0x1b	; 27
 34c:	8f 70       	andi	r24, 0x0F	; 15
 34e:	9c 2f       	mov	r25, r28
 350:	90 7f       	andi	r25, 0xF0	; 240
 352:	89 2b       	or	r24, r25
 354:	8b bb       	out	0x1b, r24	; 27
 356:	81 ee       	ldi	r24, 0xE1	; 225
 358:	94 e0       	ldi	r25, 0x04	; 4
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_WRITE_CHAR+0x1a>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_WRITE_CHAR+0x20>
	_delay_ms(5);
	LCD_config();
 360:	00 00       	nop
 362:	9d df       	rcall	.-198    	; 0x29e <LCD_config>

	LCD_PORT= (LCD_PORT & 0x0F) | (data <<4);
 364:	8b b3       	in	r24, 0x1b	; 27
 366:	28 2f       	mov	r18, r24
 368:	2f 70       	andi	r18, 0x0F	; 15
 36a:	30 e1       	ldi	r19, 0x10	; 16
 36c:	c3 9f       	mul	r28, r19
 36e:	c0 01       	movw	r24, r0
 370:	11 24       	eor	r1, r1
 372:	82 2b       	or	r24, r18
 374:	8b bb       	out	0x1b, r24	; 27
	ClearBit(LCD_CTRL_PORT,RW_switch);
 376:	c2 98       	cbi	0x18, 2	; 24
	SetBit(LCD_CTRL_PORT,RS_switch);
 378:	c1 9a       	sbi	0x18, 1	; 24
 37a:	81 ee       	ldi	r24, 0xE1	; 225
 37c:	94 e0       	ldi	r25, 0x04	; 4
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LCD_WRITE_CHAR+0x3e>
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCD_WRITE_CHAR+0x44>
	_delay_ms(5);
	LCD_config();
 384:	00 00       	nop
 386:	8b df       	rcall	.-234    	; 0x29e <LCD_config>
#endif
}
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <main>:

#include "../LCD_driver/LCD.h"
#include "../KEYPAD/KEYBAD.h"
int main (void)
{
	LCD_init();
 38c:	c7 df       	rcall	.-114    	; 0x31c <LCD_init>
	KEYPAD_INIT();
 38e:	76 de       	rcall	.-788    	; 0x7c <KEYPAD_INIT>
	char x=0;
	while(1){
		
		x=KEYPAD_GETCHAR();
 390:	7a de       	rcall	.-780    	; 0x86 <KEYPAD_GETCHAR>
		if (x== 'C')
 392:	83 34       	cpi	r24, 0x43	; 67
 394:	11 f4       	brne	.+4      	; 0x39a <main+0xe>
			LCD_clear_screen();
 396:	bf df       	rcall	.-130    	; 0x316 <LCD_clear_screen>
 398:	fb cf       	rjmp	.-10     	; 0x390 <main+0x4>
		else if (x == 'A');
 39a:	81 34       	cpi	r24, 0x41	; 65
 39c:	c9 f3       	breq	.-14     	; 0x390 <main+0x4>
		else
			LCD_WRITE_CHAR(x);
 39e:	d0 df       	rcall	.-96     	; 0x340 <LCD_WRITE_CHAR>
 3a0:	f7 cf       	rjmp	.-18     	; 0x390 <main+0x4>

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
