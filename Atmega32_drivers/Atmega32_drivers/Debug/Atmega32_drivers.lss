
Atmega32_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000436  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000436  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001398  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000089d  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b18  00000000  00000000  00002235  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00002d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004daa  00000000  00000000  00002f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000598  00000000  00000000  00007cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00008262  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000629  00000000  00000000  0000830a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	00 00       	nop
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	00 00       	nop
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	00 00       	nop
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	00 00       	nop
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	00 00       	nop
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	00 00       	nop
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	00 00       	nop
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	00 00       	nop
  30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
  32:	00 00       	nop
  34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
  3e:	00 00       	nop
  40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
  42:	00 00       	nop
  44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
  46:	00 00       	nop
  48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
  4e:	00 00       	nop
  50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	a6 d1       	rcall	.+844    	; 0x3c4 <main>
  78:	dc c1       	rjmp	.+952    	; 0x432 <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <GPIO_INIT>:
		{
			LCD_WRITE_COMMAND(LCD_CRUSOR_FIRST_ROW);
		}
		if (x==2)
		{
			LCD_WRITE_COMMAND(LCD_CRUSOR_SECOND_ROW);
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	00 d0       	rcall	.+0      	; 0x84 <GPIO_INIT+0x8>
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	80 e1       	ldi	r24, 0x10	; 16
  8a:	89 83       	std	Y+1, r24	; 0x01
  8c:	12 e0       	ldi	r17, 0x02	; 2
  8e:	1a 83       	std	Y+2, r17	; 0x02
  90:	be 01       	movw	r22, r28
  92:	6f 5f       	subi	r22, 0xFF	; 255
  94:	7f 4f       	sbci	r23, 0xFF	; 255
  96:	82 e3       	ldi	r24, 0x32	; 50
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	50 d1       	rcall	.+672    	; 0x33c <MCAL_GPIO_Init>
  9c:	80 e2       	ldi	r24, 0x20	; 32
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	1a 83       	std	Y+2, r17	; 0x02
  a2:	be 01       	movw	r22, r28
  a4:	6f 5f       	subi	r22, 0xFF	; 255
  a6:	7f 4f       	sbci	r23, 0xFF	; 255
  a8:	82 e3       	ldi	r24, 0x32	; 50
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	47 d1       	rcall	.+654    	; 0x33c <MCAL_GPIO_Init>
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	89 83       	std	Y+1, r24	; 0x01
  b2:	1a 83       	std	Y+2, r17	; 0x02
  b4:	be 01       	movw	r22, r28
  b6:	6f 5f       	subi	r22, 0xFF	; 255
  b8:	7f 4f       	sbci	r23, 0xFF	; 255
  ba:	82 e3       	ldi	r24, 0x32	; 50
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	3e d1       	rcall	.+636    	; 0x33c <MCAL_GPIO_Init>
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	89 83       	std	Y+1, r24	; 0x01
  c4:	1a 83       	std	Y+2, r17	; 0x02
  c6:	be 01       	movw	r22, r28
  c8:	6f 5f       	subi	r22, 0xFF	; 255
  ca:	7f 4f       	sbci	r23, 0xFF	; 255
  cc:	82 e3       	ldi	r24, 0x32	; 50
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	35 d1       	rcall	.+618    	; 0x33c <MCAL_GPIO_Init>
  d2:	19 83       	std	Y+1, r17	; 0x01
  d4:	1a 83       	std	Y+2, r17	; 0x02
  d6:	be 01       	movw	r22, r28
  d8:	6f 5f       	subi	r22, 0xFF	; 255
  da:	7f 4f       	sbci	r23, 0xFF	; 255
  dc:	88 e3       	ldi	r24, 0x38	; 56
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	2d d1       	rcall	.+602    	; 0x33c <MCAL_GPIO_Init>
  e2:	84 e0       	ldi	r24, 0x04	; 4
  e4:	89 83       	std	Y+1, r24	; 0x01
  e6:	1a 83       	std	Y+2, r17	; 0x02
  e8:	be 01       	movw	r22, r28
  ea:	6f 5f       	subi	r22, 0xFF	; 255
  ec:	7f 4f       	sbci	r23, 0xFF	; 255
  ee:	88 e3       	ldi	r24, 0x38	; 56
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	24 d1       	rcall	.+584    	; 0x33c <MCAL_GPIO_Init>
  f4:	88 e0       	ldi	r24, 0x08	; 8
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	1a 83       	std	Y+2, r17	; 0x02
  fa:	be 01       	movw	r22, r28
  fc:	6f 5f       	subi	r22, 0xFF	; 255
  fe:	7f 4f       	sbci	r23, 0xFF	; 255
 100:	88 e3       	ldi	r24, 0x38	; 56
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	1b d1       	rcall	.+566    	; 0x33c <MCAL_GPIO_Init>
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	1f 91       	pop	r17
 110:	08 95       	ret

00000112 <Data_INPUT>:
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	00 d0       	rcall	.+0      	; 0x118 <Data_INPUT+0x6>
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	80 e1       	ldi	r24, 0x10	; 16
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	1a 82       	std	Y+2, r1	; 0x02
 122:	be 01       	movw	r22, r28
 124:	6f 5f       	subi	r22, 0xFF	; 255
 126:	7f 4f       	sbci	r23, 0xFF	; 255
 128:	82 e3       	ldi	r24, 0x32	; 50
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	07 d1       	rcall	.+526    	; 0x33c <MCAL_GPIO_Init>
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	89 83       	std	Y+1, r24	; 0x01
 132:	1a 82       	std	Y+2, r1	; 0x02
 134:	be 01       	movw	r22, r28
 136:	6f 5f       	subi	r22, 0xFF	; 255
 138:	7f 4f       	sbci	r23, 0xFF	; 255
 13a:	82 e3       	ldi	r24, 0x32	; 50
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fe d0       	rcall	.+508    	; 0x33c <MCAL_GPIO_Init>
 140:	80 e4       	ldi	r24, 0x40	; 64
 142:	89 83       	std	Y+1, r24	; 0x01
 144:	1a 82       	std	Y+2, r1	; 0x02
 146:	be 01       	movw	r22, r28
 148:	6f 5f       	subi	r22, 0xFF	; 255
 14a:	7f 4f       	sbci	r23, 0xFF	; 255
 14c:	82 e3       	ldi	r24, 0x32	; 50
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	f5 d0       	rcall	.+490    	; 0x33c <MCAL_GPIO_Init>
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	89 83       	std	Y+1, r24	; 0x01
 156:	1a 82       	std	Y+2, r1	; 0x02
 158:	be 01       	movw	r22, r28
 15a:	6f 5f       	subi	r22, 0xFF	; 255
 15c:	7f 4f       	sbci	r23, 0xFF	; 255
 15e:	82 e3       	ldi	r24, 0x32	; 50
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	ec d0       	rcall	.+472    	; 0x33c <MCAL_GPIO_Init>
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <LCD_config>:
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	68 e0       	ldi	r22, 0x08	; 8
 172:	88 e3       	ldi	r24, 0x38	; 56
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	14 d1       	rcall	.+552    	; 0x3a0 <MCAL_WritePin>
 178:	83 ed       	ldi	r24, 0xD3	; 211
 17a:	90 e3       	ldi	r25, 0x30	; 48
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_config+0xe>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_config+0x14>
 182:	00 00       	nop
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	68 e0       	ldi	r22, 0x08	; 8
 188:	88 e3       	ldi	r24, 0x38	; 56
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	09 c1       	rjmp	.+530    	; 0x3a0 <MCAL_WritePin>
 18e:	08 95       	ret

00000190 <LCD_busy>:
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	00 d0       	rcall	.+0      	; 0x198 <LCD_busy+0x8>
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	ba df       	rcall	.-140    	; 0x112 <Data_INPUT>
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	68 e0       	ldi	r22, 0x08	; 8
 1a2:	88 e3       	ldi	r24, 0x38	; 56
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	fc d0       	rcall	.+504    	; 0x3a0 <MCAL_WritePin>
 1a8:	12 e0       	ldi	r17, 0x02	; 2
 1aa:	19 83       	std	Y+1, r17	; 0x01
 1ac:	1a 83       	std	Y+2, r17	; 0x02
 1ae:	be 01       	movw	r22, r28
 1b0:	6f 5f       	subi	r22, 0xFF	; 255
 1b2:	7f 4f       	sbci	r23, 0xFF	; 255
 1b4:	88 e3       	ldi	r24, 0x38	; 56
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	c1 d0       	rcall	.+386    	; 0x33c <MCAL_GPIO_Init>
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	89 83       	std	Y+1, r24	; 0x01
 1be:	1a 83       	std	Y+2, r17	; 0x02
 1c0:	be 01       	movw	r22, r28
 1c2:	6f 5f       	subi	r22, 0xFF	; 255
 1c4:	7f 4f       	sbci	r23, 0xFF	; 255
 1c6:	88 e3       	ldi	r24, 0x38	; 56
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	b8 d0       	rcall	.+368    	; 0x33c <MCAL_GPIO_Init>
 1cc:	88 e0       	ldi	r24, 0x08	; 8
 1ce:	89 83       	std	Y+1, r24	; 0x01
 1d0:	1a 83       	std	Y+2, r17	; 0x02
 1d2:	be 01       	movw	r22, r28
 1d4:	6f 5f       	subi	r22, 0xFF	; 255
 1d6:	7f 4f       	sbci	r23, 0xFF	; 255
 1d8:	88 e3       	ldi	r24, 0x38	; 56
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	af d0       	rcall	.+350    	; 0x33c <MCAL_GPIO_Init>
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	64 e0       	ldi	r22, 0x04	; 4
 1e2:	88 e3       	ldi	r24, 0x38	; 56
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	dc d0       	rcall	.+440    	; 0x3a0 <MCAL_WritePin>
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	88 e3       	ldi	r24, 0x38	; 56
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	d7 d0       	rcall	.+430    	; 0x3a0 <MCAL_WritePin>
 1f2:	bd df       	rcall	.-134    	; 0x16e <LCD_config>
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	64 e0       	ldi	r22, 0x04	; 4
 1f8:	88 e3       	ldi	r24, 0x38	; 56
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	d1 d0       	rcall	.+418    	; 0x3a0 <MCAL_WritePin>
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	08 95       	ret

0000020a <LCD_WRITE_COMMAND>:
 20a:	cf 93       	push	r28
 20c:	c8 2f       	mov	r28, r24
 20e:	c0 df       	rcall	.-128    	; 0x190 <LCD_busy>
 210:	6c 2f       	mov	r22, r28
 212:	60 7f       	andi	r22, 0xF0	; 240
 214:	8b e3       	ldi	r24, 0x3B	; 59
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	d2 d0       	rcall	.+420    	; 0x3be <MCAL_WritePort>
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	62 e0       	ldi	r22, 0x02	; 2
 21e:	88 e3       	ldi	r24, 0x38	; 56
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	be d0       	rcall	.+380    	; 0x3a0 <MCAL_WritePin>
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	64 e0       	ldi	r22, 0x04	; 4
 228:	88 e3       	ldi	r24, 0x38	; 56
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	b9 d0       	rcall	.+370    	; 0x3a0 <MCAL_WritePin>
 22e:	9f df       	rcall	.-194    	; 0x16e <LCD_config>
 230:	6c 2f       	mov	r22, r28
 232:	62 95       	swap	r22
 234:	60 7f       	andi	r22, 0xF0	; 240
 236:	8b e3       	ldi	r24, 0x3B	; 59
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	c1 d0       	rcall	.+386    	; 0x3be <MCAL_WritePort>
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	62 e0       	ldi	r22, 0x02	; 2
 240:	88 e3       	ldi	r24, 0x38	; 56
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	ad d0       	rcall	.+346    	; 0x3a0 <MCAL_WritePin>
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	64 e0       	ldi	r22, 0x04	; 4
 24a:	88 e3       	ldi	r24, 0x38	; 56
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	a8 d0       	rcall	.+336    	; 0x3a0 <MCAL_WritePin>
 250:	8e df       	rcall	.-228    	; 0x16e <LCD_config>
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <LCD_clear_screen>:
	//DATA_DIRC_LCD=0xFF;
	//ClearBit(LCD_CTRL_PORT,RW_switch);
		}
		
void LCD_clear_screen(void){
	LCD_WRITE_COMMAND(LCD_CLEAR);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	d8 cf       	rjmp	.-80     	; 0x20a <LCD_WRITE_COMMAND>
 25a:	08 95       	ret

0000025c <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	87 e8       	ldi	r24, 0x87	; 135
 25e:	93 e1       	ldi	r25, 0x13	; 19
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <LCD_init+0x4>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_init+0xa>
 266:	00 00       	nop
void LCD_init(void){
	
	_delay_ms(20);
	
	
		LCD_busy();
 268:	93 df       	rcall	.-218    	; 0x190 <LCD_busy>
		GPIO_INIT();
 26a:	08 df       	rcall	.-496    	; 0x7c <GPIO_INIT>
 26c:	81 ee       	ldi	r24, 0xE1	; 225
 26e:	94 e0       	ldi	r25, 0x04	; 4
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <LCD_init+0x14>
 274:	00 c0       	rjmp	.+0      	; 0x276 <LCD_init+0x1a>
 276:	00 00       	nop
 278:	40 e0       	ldi	r20, 0x00	; 0
		_delay_ms(5);
		//SetBit(DATA_DIRC_CTRL,RS_switch);
		//SetBit(DATA_DIRC_CTRL,RW_switch);
		//SetBit(DATA_DIRC_CTRL,ENABLE_switch);
		MCAL_WritePin(LCD_CTRL_PORT, RS_switch , GPRIO_PIN_RESET);
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	88 e3       	ldi	r24, 0x38	; 56
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	8f d0       	rcall	.+286    	; 0x3a0 <MCAL_WritePin>
 282:	40 e0       	ldi	r20, 0x00	; 0
		MCAL_WritePin(LCD_CTRL_PORT, RW_switch , GPRIO_PIN_RESET);
 284:	64 e0       	ldi	r22, 0x04	; 4
 286:	88 e3       	ldi	r24, 0x38	; 56
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	8a d0       	rcall	.+276    	; 0x3a0 <MCAL_WritePin>
 28c:	40 e0       	ldi	r20, 0x00	; 0
		MCAL_WritePin(LCD_CTRL_PORT, ENABLE_switch , GPRIO_PIN_RESET);
 28e:	68 e0       	ldi	r22, 0x08	; 8
 290:	88 e3       	ldi	r24, 0x38	; 56
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	85 d0       	rcall	.+266    	; 0x3a0 <MCAL_WritePin>
		LCD_clear_screen();
		LCD_WRITE_COMMAND(LCD_FUNCTION_8bits_2lines);
	#endif

	#ifdef four_bit_mode
		LCD_WRITE_COMMAND(0x02);
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	b8 df       	rcall	.-144    	; 0x20a <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD_FUNCTION_4bits_2lines);
 29a:	88 e2       	ldi	r24, 0x28	; 40
 29c:	b6 df       	rcall	.-148    	; 0x20a <LCD_WRITE_COMMAND>
	#endif
	
	 LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	b4 df       	rcall	.-152    	; 0x20a <LCD_WRITE_COMMAND>
 2a2:	80 e8       	ldi	r24, 0x80	; 128
	 LCD_WRITE_COMMAND(LCD_CRUSOR_FIRST_ROW);
 2a4:	b2 df       	rcall	.-156    	; 0x20a <LCD_WRITE_COMMAND>
 2a6:	8f e0       	ldi	r24, 0x0F	; 15
 2a8:	b0 cf       	rjmp	.-160    	; 0x20a <LCD_WRITE_COMMAND>
	 LCD_WRITE_COMMAND(LCD_DISPLAY_CRUSOR_BLINK);
 2aa:	08 95       	ret

000002ac <LCD_WRITE_CHAR>:
 2ac:	cf 93       	push	r28
 2ae:	c8 2f       	mov	r28, r24
 2b0:	6f df       	rcall	.-290    	; 0x190 <LCD_busy>
	counter=0;
}
#endif
#ifdef four_bit_mode

	MCAL_WritePort(LCD_DATA_PORT,(data & 0xF0) );
 2b2:	6c 2f       	mov	r22, r28
 2b4:	60 7f       	andi	r22, 0xF0	; 240
 2b6:	8b e3       	ldi	r24, 0x3B	; 59
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	81 d0       	rcall	.+258    	; 0x3be <MCAL_WritePort>
	MCAL_WritePin(LCD_CTRL_PORT, RW_switch , GPRIO_PIN_RESET);
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	64 e0       	ldi	r22, 0x04	; 4
 2c0:	88 e3       	ldi	r24, 0x38	; 56
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	6d d0       	rcall	.+218    	; 0x3a0 <MCAL_WritePin>
	MCAL_WritePin(LCD_CTRL_PORT, RS_switch , GPRIO_PIN_SET);
 2c6:	41 e0       	ldi	r20, 0x01	; 1
 2c8:	62 e0       	ldi	r22, 0x02	; 2
 2ca:	88 e3       	ldi	r24, 0x38	; 56
 2cc:	90 e0       	ldi	r25, 0x00	; 0
	
	//LCD_PORT= (LCD_PORT & 0x0F) | (data & 0xF0);
	//ClearBit(LCD_CTRL_PORT,RW_switch);
	//SetBit(LCD_CTRL_PORT,RS_switch);
	
	LCD_config();
 2ce:	68 d0       	rcall	.+208    	; 0x3a0 <MCAL_WritePin>
 2d0:	4e df       	rcall	.-356    	; 0x16e <LCD_config>

	MCAL_WritePort(LCD_DATA_PORT, (data <<4) );
 2d2:	6c 2f       	mov	r22, r28
 2d4:	62 95       	swap	r22
 2d6:	60 7f       	andi	r22, 0xF0	; 240
 2d8:	8b e3       	ldi	r24, 0x3B	; 59
 2da:	90 e0       	ldi	r25, 0x00	; 0
	MCAL_WritePin(LCD_CTRL_PORT, RW_switch , GPRIO_PIN_RESET);
 2dc:	70 d0       	rcall	.+224    	; 0x3be <MCAL_WritePort>
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	64 e0       	ldi	r22, 0x04	; 4
 2e2:	88 e3       	ldi	r24, 0x38	; 56
	MCAL_WritePin(LCD_CTRL_PORT, RS_switch , GPRIO_PIN_SET);
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	5c d0       	rcall	.+184    	; 0x3a0 <MCAL_WritePin>
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	88 e3       	ldi	r24, 0x38	; 56
 2ee:	90 e0       	ldi	r25, 0x00	; 0
	
	//LCD_PORT= (LCD_PORT & 0x0F) | (data <<4);
	//ClearBit(LCD_CTRL_PORT,RW_switch);
	//SetBit(LCD_CTRL_PORT,RS_switch);
	
	LCD_config();
 2f0:	57 d0       	rcall	.+174    	; 0x3a0 <MCAL_WritePin>
 2f2:	3d df       	rcall	.-390    	; 0x16e <LCD_config>
#endif
}
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <LCD_WRITE_STRING>:


void LCD_WRITE_STRING(char *data){
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	d8 2f       	mov	r29, r24
 302:	c9 2f       	mov	r28, r25
		LCD_busy();
 304:	45 df       	rcall	.-374    	; 0x190 <LCD_busy>
 306:	0d 2f       	mov	r16, r29
 308:	1c 2f       	mov	r17, r28

	char count=0;
 30a:	c0 e0       	ldi	r28, 0x00	; 0
	while( *data >0 )
 30c:	0d c0       	rjmp	.+26     	; 0x328 <LCD_WRITE_STRING+0x30>
	{
		count++;
		LCD_WRITE_CHAR(*data++);
 30e:	cf 5f       	subi	r28, 0xFF	; 255
 310:	cd df       	rcall	.-102    	; 0x2ac <LCD_WRITE_CHAR>

		if (count == 16)
 312:	c0 31       	cpi	r28, 0x10	; 16
		{
			LCD_WRITE_COMMAND(LCD_CRUSOR_FIRST_ROW);
		}
		if (x==2)
		{
			LCD_WRITE_COMMAND(LCD_CRUSOR_SECOND_ROW);
 314:	19 f4       	brne	.+6      	; 0x31c <LCD_WRITE_STRING+0x24>
 316:	80 ec       	ldi	r24, 0xC0	; 192
 318:	78 df       	rcall	.-272    	; 0x20a <LCD_WRITE_COMMAND>
		if (count == 16)
		{

			LCD_CRUSOR_GOTO_XY(2,0);
		}
		else if (count==32){
 31a:	06 c0       	rjmp	.+12     	; 0x328 <LCD_WRITE_STRING+0x30>
				LCD_clear_screen();
 31c:	c0 32       	cpi	r28, 0x20	; 32
 31e:	21 f4       	brne	.+8      	; 0x328 <LCD_WRITE_STRING+0x30>
	if(y<16 && y>=0)
	{
		
		if (x==1)
		{
			LCD_WRITE_COMMAND(LCD_CRUSOR_FIRST_ROW);
 320:	9a df       	rcall	.-204    	; 0x256 <LCD_clear_screen>
 322:	80 e8       	ldi	r24, 0x80	; 128
 324:	72 df       	rcall	.-284    	; 0x20a <LCD_WRITE_COMMAND>
			LCD_CRUSOR_GOTO_XY(2,0);
		}
		else if (count==32){
				LCD_clear_screen();
				LCD_CRUSOR_GOTO_XY(1,0);
				count=0;
 326:	c0 e0       	ldi	r28, 0x00	; 0

void LCD_WRITE_STRING(char *data){
		LCD_busy();

	char count=0;
	while( *data >0 )
 328:	f8 01       	movw	r30, r16
 32a:	81 91       	ld	r24, Z+
 32c:	8f 01       	movw	r16, r30
 32e:	18 16       	cp	r1, r24
 330:	74 f3       	brlt	.-36     	; 0x30e <LCD_WRITE_STRING+0x16>
				count=0;
			}

	}

 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	08 95       	ret

0000033c <MCAL_GPIO_Init>:
uint8_t MCAL_READPort( uint8_t *PORT, uint8_t PinNum){
	uint8_t	value;
	value = (*(volatile uint8_t*)(PORT-2) & PinNum );
	return value;
	
}
 33c:	db 01       	movw	r26, r22
 33e:	11 96       	adiw	r26, 0x01	; 1
 340:	2c 91       	ld	r18, X
 342:	11 97       	sbiw	r26, 0x01	; 1
 344:	21 30       	cpi	r18, 0x01	; 1
 346:	89 f0       	breq	.+34     	; 0x36a <MCAL_GPIO_Init+0x2e>
 348:	18 f0       	brcs	.+6      	; 0x350 <MCAL_GPIO_Init+0x14>
 34a:	22 30       	cpi	r18, 0x02	; 2
 34c:	d9 f0       	breq	.+54     	; 0x384 <MCAL_GPIO_Init+0x48>
 34e:	08 95       	ret
 350:	fc 01       	movw	r30, r24
 352:	32 91       	ld	r19, -Z
 354:	2c 91       	ld	r18, X
 356:	20 95       	com	r18
 358:	23 23       	and	r18, r19
 35a:	20 83       	st	Z, r18
 35c:	fc 01       	movw	r30, r24
 35e:	30 81       	ld	r19, Z
 360:	2c 91       	ld	r18, X
 362:	20 95       	com	r18
 364:	23 23       	and	r18, r19
 366:	20 83       	st	Z, r18
 368:	08 95       	ret
 36a:	fc 01       	movw	r30, r24
 36c:	32 91       	ld	r19, -Z
 36e:	2c 91       	ld	r18, X
 370:	20 95       	com	r18
 372:	23 23       	and	r18, r19
 374:	20 83       	st	Z, r18
 376:	fc 01       	movw	r30, r24
 378:	30 81       	ld	r19, Z
 37a:	2c 91       	ld	r18, X
 37c:	20 95       	com	r18
 37e:	23 23       	and	r18, r19
 380:	20 83       	st	Z, r18
 382:	08 95       	ret
 384:	fc 01       	movw	r30, r24
 386:	92 91       	ld	r25, -Z
 388:	8c 91       	ld	r24, X
 38a:	89 2b       	or	r24, r25
 38c:	80 83       	st	Z, r24
 38e:	08 95       	ret

00000390 <MCAL_READPin>:
 390:	02 97       	sbiw	r24, 0x02	; 2
 392:	fc 01       	movw	r30, r24
 394:	80 81       	ld	r24, Z
 396:	68 23       	and	r22, r24
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	09 f4       	brne	.+2      	; 0x39e <MCAL_READPin+0xe>
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	08 95       	ret

000003a0 <MCAL_WritePin>:

void MCAL_WritePin( uint8_t *PORT, uint8_t PinNum , uint8_t value)
{
	if ( value == GPRIO_PIN_SET)
 3a0:	41 30       	cpi	r20, 0x01	; 1
 3a2:	29 f4       	brne	.+10     	; 0x3ae <MCAL_WritePin+0xe>
	{
		(*(volatile uint8_t*)(PORT)) |= PinNum;
 3a4:	fc 01       	movw	r30, r24
 3a6:	20 81       	ld	r18, Z
 3a8:	62 2b       	or	r22, r18
 3aa:	60 83       	st	Z, r22
 3ac:	08 95       	ret
		
	}
	else if ( value == GPRIO_PIN_RESET)
 3ae:	41 11       	cpse	r20, r1
 3b0:	05 c0       	rjmp	.+10     	; 0x3bc <MCAL_WritePin+0x1c>
	{
		(*(volatile uint8_t*)(PORT)) &= ~ PinNum;
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 81       	ld	r18, Z
 3b6:	60 95       	com	r22
 3b8:	62 23       	and	r22, r18
 3ba:	60 83       	st	Z, r22
 3bc:	08 95       	ret

000003be <MCAL_WritePort>:
		
	}
}
void MCAL_WritePort( uint8_t *PORT,uint8_t value)
{
	(*(volatile uint8_t*)(PORT)) = value;
 3be:	fc 01       	movw	r30, r24
 3c0:	60 83       	st	Z, r22
 3c2:	08 95       	ret

000003c4 <main>:
#include "KEYBAD.h"
#include "LCD.h"
#include <util/delay.h>

int main (void)
{ 
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <main+0x6>
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
	GPIO_PinConfig_t PinConfig;
	PinConfig.Pin_Number= GPIO_PIN_7;
 3ce:	80 e8       	ldi	r24, 0x80	; 128
 3d0:	89 83       	std	Y+1, r24	; 0x01
	PinConfig.mode = GPIO_MODE_OUTPUT;
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	8a 83       	std	Y+2, r24	; 0x02
	MCAL_GPIO_Init(PORTD, &PinConfig);
 3d6:	be 01       	movw	r22, r28
 3d8:	6f 5f       	subi	r22, 0xFF	; 255
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	82 e3       	ldi	r24, 0x32	; 50
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	ad df       	rcall	.-166    	; 0x33c <MCAL_GPIO_Init>
	PinConfig.Pin_Number= GPIO_PIN_0;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	89 83       	std	Y+1, r24	; 0x01
	PinConfig.mode = GPIO_MODE_INPUT_FLO;
 3e6:	1a 82       	std	Y+2, r1	; 0x02
	MCAL_GPIO_Init(PORTD, &PinConfig);
 3e8:	be 01       	movw	r22, r28
 3ea:	6f 5f       	subi	r22, 0xFF	; 255
 3ec:	7f 4f       	sbci	r23, 0xFF	; 255
 3ee:	82 e3       	ldi	r24, 0x32	; 50
 3f0:	90 e0       	ldi	r25, 0x00	; 0
	
	LCD_init();
 3f2:	a4 df       	rcall	.-184    	; 0x33c <MCAL_GPIO_Init>
	LCD_WRITE_STRING("LEARN IN DEPTH");
 3f4:	33 df       	rcall	.-410    	; 0x25c <LCD_init>
 3f6:	80 e6       	ldi	r24, 0x60	; 96
 3f8:	90 e0       	ldi	r25, 0x00	; 0
	while(1)
	{
		if ( MCAL_READPin(PORTD, GPIO_PIN_0) == GPRIO_PIN_SET)
 3fa:	7e df       	rcall	.-260    	; 0x2f8 <LCD_WRITE_STRING>
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	82 e3       	ldi	r24, 0x32	; 50
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	c6 df       	rcall	.-116    	; 0x390 <MCAL_READPin>
 404:	81 30       	cpi	r24, 0x01	; 1
		MCAL_WritePin(PORTD, GPIO_PIN_7,GPRIO_PIN_SET );
 406:	31 f4       	brne	.+12     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	60 e8       	ldi	r22, 0x80	; 128
 40c:	82 e3       	ldi	r24, 0x32	; 50
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	c7 df       	rcall	.-114    	; 0x3a0 <MCAL_WritePin>
		else
				MCAL_WritePin(PORTD, GPIO_PIN_7,GPRIO_PIN_RESET );
 412:	05 c0       	rjmp	.+10     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	60 e8       	ldi	r22, 0x80	; 128
 418:	82 e3       	ldi	r24, 0x32	; 50
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	c1 df       	rcall	.-126    	; 0x3a0 <MCAL_WritePin>
 41e:	2f e3       	ldi	r18, 0x3F	; 63
 420:	8d e0       	ldi	r24, 0x0D	; 13
 422:	93 e0       	ldi	r25, 0x03	; 3
 424:	21 50       	subi	r18, 0x01	; 1
 426:	80 40       	sbci	r24, 0x00	; 0
 428:	90 40       	sbci	r25, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
 430:	e5 cf       	rjmp	.-54     	; 0x3fc <main+0x38>

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
