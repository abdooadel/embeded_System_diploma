
KEYPDA_LCD_7seg_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005b0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006e0  080006e8  000106e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006e0  080006e0  000106e8  2**0
                  CONTENTS
  4 .ARM          00000000  080006e0  080006e0  000106e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006e0  080006e8  000106e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006e0  080006e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006e4  080006e4  000106e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080006e8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080006e8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000106e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000023f8  00000000  00000000  00010711  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005de  00000000  00000000  00012b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000630  00000000  00000000  000130e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000118  00000000  00000000  00013718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e0  00000000  00000000  00013830  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001f19  00000000  00000000  00013910  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001505  00000000  00000000  00015829  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007ec7  00000000  00000000  00016d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001ebf5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000034c  00000000  00000000  0001ec70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080006c8 	.word	0x080006c8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080006c8 	.word	0x080006c8

08000170 <main>:
	}
}


int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_ENABLE();
 8000174:	4b08      	ldr	r3, [pc, #32]	; (8000198 <main+0x28>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a07      	ldr	r2, [pc, #28]	; (8000198 <main+0x28>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_ENABLE();
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <main+0x28>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a04      	ldr	r2, [pc, #16]	; (8000198 <main+0x28>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

	//	seven_seg_init();
	LCD_INIT();
 800018c:	f000 fa1a 	bl	80005c4 <LCD_INIT>



	while(1)
	{
		LCD_WRITE_CHAR( 'A' );
 8000190:	2041      	movs	r0, #65	; 0x41
 8000192:	f000 fa53 	bl	800063c <LCD_WRITE_CHAR>
 8000196:	e7fb      	b.n	8000190 <main+0x20>
 8000198:	40021000 	.word	0x40021000

0800019c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800019c:	480d      	ldr	r0, [pc, #52]	; (80001d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800019e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001a4:	480c      	ldr	r0, [pc, #48]	; (80001d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80001a6:	490d      	ldr	r1, [pc, #52]	; (80001dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80001a8:	4a0d      	ldr	r2, [pc, #52]	; (80001e0 <LoopForever+0xe>)
  movs r3, #0
 80001aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001ac:	e002      	b.n	80001b4 <LoopCopyDataInit>

080001ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001b2:	3304      	adds	r3, #4

080001b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001b8:	d3f9      	bcc.n	80001ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ba:	4a0a      	ldr	r2, [pc, #40]	; (80001e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001bc:	4c0a      	ldr	r4, [pc, #40]	; (80001e8 <LoopForever+0x16>)
  movs r3, #0
 80001be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001c0:	e001      	b.n	80001c6 <LoopFillZerobss>

080001c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001c4:	3204      	adds	r2, #4

080001c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001c8:	d3fb      	bcc.n	80001c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001ca:	f000 fa59 	bl	8000680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001ce:	f7ff ffcf 	bl	8000170 <main>

080001d2 <LoopForever>:

LoopForever:
    b LoopForever
 80001d2:	e7fe      	b.n	80001d2 <LoopForever>
  ldr   r0, =_estack
 80001d4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80001d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001e0:	080006e8 	.word	0x080006e8
  ldr r2, =_sbss
 80001e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001e8:	20000020 	.word	0x20000020

080001ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001ec:	e7fe      	b.n	80001ec <ADC1_2_IRQHandler>

080001ee <Get_CRLH_Position>:

#include "Stm32_F103C6_GPIO_drivers.h"


uint8_t Get_CRLH_Position(uint16_t PinNummber)
{
 80001ee:	b480      	push	{r7}
 80001f0:	b083      	sub	sp, #12
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	4603      	mov	r3, r0
 80001f6:	80fb      	strh	r3, [r7, #6]
	switch(PinNummber){
 80001f8:	88fb      	ldrh	r3, [r7, #6]
 80001fa:	2b80      	cmp	r3, #128	; 0x80
 80001fc:	d042      	beq.n	8000284 <Get_CRLH_Position+0x96>
 80001fe:	2b80      	cmp	r3, #128	; 0x80
 8000200:	dc11      	bgt.n	8000226 <Get_CRLH_Position+0x38>
 8000202:	2b08      	cmp	r3, #8
 8000204:	d036      	beq.n	8000274 <Get_CRLH_Position+0x86>
 8000206:	2b08      	cmp	r3, #8
 8000208:	dc06      	bgt.n	8000218 <Get_CRLH_Position+0x2a>
 800020a:	2b02      	cmp	r3, #2
 800020c:	d02e      	beq.n	800026c <Get_CRLH_Position+0x7e>
 800020e:	2b04      	cmp	r3, #4
 8000210:	d02e      	beq.n	8000270 <Get_CRLH_Position+0x82>
 8000212:	2b01      	cmp	r3, #1
 8000214:	d028      	beq.n	8000268 <Get_CRLH_Position+0x7a>
 8000216:	e047      	b.n	80002a8 <Get_CRLH_Position+0xba>
 8000218:	2b20      	cmp	r3, #32
 800021a:	d02f      	beq.n	800027c <Get_CRLH_Position+0x8e>
 800021c:	2b40      	cmp	r3, #64	; 0x40
 800021e:	d02f      	beq.n	8000280 <Get_CRLH_Position+0x92>
 8000220:	2b10      	cmp	r3, #16
 8000222:	d029      	beq.n	8000278 <Get_CRLH_Position+0x8a>
 8000224:	e040      	b.n	80002a8 <Get_CRLH_Position+0xba>
 8000226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800022a:	d033      	beq.n	8000294 <Get_CRLH_Position+0xa6>
 800022c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000230:	dc09      	bgt.n	8000246 <Get_CRLH_Position+0x58>
 8000232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000236:	d029      	beq.n	800028c <Get_CRLH_Position+0x9e>
 8000238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800023c:	d028      	beq.n	8000290 <Get_CRLH_Position+0xa2>
 800023e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000242:	d021      	beq.n	8000288 <Get_CRLH_Position+0x9a>
 8000244:	e030      	b.n	80002a8 <Get_CRLH_Position+0xba>
 8000246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800024a:	d027      	beq.n	800029c <Get_CRLH_Position+0xae>
 800024c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000250:	dc03      	bgt.n	800025a <Get_CRLH_Position+0x6c>
 8000252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000256:	d01f      	beq.n	8000298 <Get_CRLH_Position+0xaa>
 8000258:	e026      	b.n	80002a8 <Get_CRLH_Position+0xba>
 800025a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800025e:	d01f      	beq.n	80002a0 <Get_CRLH_Position+0xb2>
 8000260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000264:	d01e      	beq.n	80002a4 <Get_CRLH_Position+0xb6>
 8000266:	e01f      	b.n	80002a8 <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 8000268:	2300      	movs	r3, #0
 800026a:	e01e      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 800026c:	2304      	movs	r3, #4
 800026e:	e01c      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000270:	2308      	movs	r3, #8
 8000272:	e01a      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000274:	230c      	movs	r3, #12
 8000276:	e018      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000278:	2310      	movs	r3, #16
 800027a:	e016      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800027c:	2314      	movs	r3, #20
 800027e:	e014      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000280:	2318      	movs	r3, #24
 8000282:	e012      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000284:	231c      	movs	r3, #28
 8000286:	e010      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000288:	2300      	movs	r3, #0
 800028a:	e00e      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800028c:	2304      	movs	r3, #4
 800028e:	e00c      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000290:	2308      	movs	r3, #8
 8000292:	e00a      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000294:	230c      	movs	r3, #12
 8000296:	e008      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000298:	2310      	movs	r3, #16
 800029a:	e006      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800029c:	2314      	movs	r3, #20
 800029e:	e004      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 80002a0:	2318      	movs	r3, #24
 80002a2:	e002      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 80002a4:	231c      	movs	r3, #28
 80002a6:	e000      	b.n	80002aa <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 80002a8:	2300      	movs	r3, #0
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr

080002b4 <MCAL_GPIO_Init>:
 * @param [in] 	- GPIOX, GPIO_PinConfig_t PinConfig
 * @param [in] 	-PinConfig
 * @retval 		-none
 * Note			-
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOX, GPIO_PinConfig_t *PinConfig ){
 80002b4:	b590      	push	{r4, r7, lr}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
	//Port configuration register low((GPIOx_CRL)) configure pin 0 >>> 7
	//Port configuration register high((GPIOx_CRH)) configure pin 8 >>> 15
	volatile uint32_t *configRegister= NULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
	uint8_t Pinconfig;
	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?  &GPIOX->CRL :  &GPIOX->CRH;
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	2bff      	cmp	r3, #255	; 0xff
 80002c8:	d801      	bhi.n	80002ce <MCAL_GPIO_Init+0x1a>
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	e001      	b.n	80002d2 <MCAL_GPIO_Init+0x1e>
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	3304      	adds	r3, #4
 80002d2:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0]  MODE[1:0]
	*configRegister &= ~(0b1111<< Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ff88 	bl	80001ee <Get_CRLH_Position>
 80002de:	4603      	mov	r3, r0
 80002e0:	461a      	mov	r2, r3
 80002e2:	230f      	movs	r3, #15
 80002e4:	4093      	lsls	r3, r2
 80002e6:	43da      	mvns	r2, r3
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	401a      	ands	r2, r3
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	601a      	str	r2, [r3, #0]

	//if pin is output
	if (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP || PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_Mode == GPIO_MODE_AF_OUTPUT_PP|| PinConfig->GPIO_Mode == GPIO_MODE_AF_OUTPUT_OD )
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	789b      	ldrb	r3, [r3, #2]
 80002f6:	2b04      	cmp	r3, #4
 80002f8:	d00b      	beq.n	8000312 <MCAL_GPIO_Init+0x5e>
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	789b      	ldrb	r3, [r3, #2]
 80002fe:	2b05      	cmp	r3, #5
 8000300:	d007      	beq.n	8000312 <MCAL_GPIO_Init+0x5e>
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	789b      	ldrb	r3, [r3, #2]
 8000306:	2b06      	cmp	r3, #6
 8000308:	d003      	beq.n	8000312 <MCAL_GPIO_Init+0x5e>
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	789b      	ldrb	r3, [r3, #2]
 800030e:	2b07      	cmp	r3, #7
 8000310:	d10e      	bne.n	8000330 <MCAL_GPIO_Init+0x7c>
	{
		Pinconfig = (((PinConfig->GPIO_Mode - 4)	 << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F;
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	789b      	ldrb	r3, [r3, #2]
 8000316:	3b04      	subs	r3, #4
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	b25a      	sxtb	r2, r3
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	78db      	ldrb	r3, [r3, #3]
 8000320:	b25b      	sxtb	r3, r3
 8000322:	4313      	orrs	r3, r2
 8000324:	b25b      	sxtb	r3, r3
 8000326:	b2db      	uxtb	r3, r3
 8000328:	f003 030f 	and.w	r3, r3, #15
 800032c:	73fb      	strb	r3, [r7, #15]
 800032e:	e02c      	b.n	800038a <MCAL_GPIO_Init+0xd6>
	}
	else
	{
		if ( PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO||  PinConfig->GPIO_Mode == GPIO_MODE_Analog)
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	789b      	ldrb	r3, [r3, #2]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d003      	beq.n	8000340 <MCAL_GPIO_Init+0x8c>
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	789b      	ldrb	r3, [r3, #2]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d107      	bne.n	8000350 <MCAL_GPIO_Init+0x9c>
		{
			Pinconfig= (PinConfig->GPIO_Mode <<2) & 0x0f;
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	789b      	ldrb	r3, [r3, #2]
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	b2db      	uxtb	r3, r3
 8000348:	f003 030f 	and.w	r3, r3, #15
 800034c:	73fb      	strb	r3, [r7, #15]
 800034e:	e01c      	b.n	800038a <MCAL_GPIO_Init+0xd6>
		}
		else if(PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT)
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	789b      	ldrb	r3, [r3, #2]
 8000354:	2b08      	cmp	r3, #8
 8000356:	d102      	bne.n	800035e <MCAL_GPIO_Init+0xaa>
		{
			Pinconfig=( GPIO_MODE_INPUT_FLO << 2) & 0x0f;
 8000358:	2304      	movs	r3, #4
 800035a:	73fb      	strb	r3, [r7, #15]
 800035c:	e015      	b.n	800038a <MCAL_GPIO_Init+0xd6>
		}
		else {
			Pinconfig= (GPIO_MODE_INPUT_PU <<2) & 0x0f;
 800035e:	230c      	movs	r3, #12
 8000360:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	789b      	ldrb	r3, [r3, #2]
 8000366:	2b03      	cmp	r3, #3
 8000368:	d107      	bne.n	800037a <MCAL_GPIO_Init+0xc6>
				GPIOX->ODR |= PinConfig->GPIO_PinNumber;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	68db      	ldr	r3, [r3, #12]
 800036e:	683a      	ldr	r2, [r7, #0]
 8000370:	8812      	ldrh	r2, [r2, #0]
 8000372:	431a      	orrs	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	60da      	str	r2, [r3, #12]
 8000378:	e007      	b.n	800038a <MCAL_GPIO_Init+0xd6>
			else
				GPIOX->ODR &= ~(PinConfig->GPIO_PinNumber);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	68db      	ldr	r3, [r3, #12]
 800037e:	683a      	ldr	r2, [r7, #0]
 8000380:	8812      	ldrh	r2, [r2, #0]
 8000382:	43d2      	mvns	r2, r2
 8000384:	401a      	ands	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	60da      	str	r2, [r3, #12]

		}

	}

	*configRegister |=  Pinconfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber);
 800038a:	7bfc      	ldrb	r4, [r7, #15]
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ff2c 	bl	80001ee <Get_CRLH_Position>
 8000396:	4603      	mov	r3, r0
 8000398:	fa04 f203 	lsl.w	r2, r4, r3
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	431a      	orrs	r2, r3
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	601a      	str	r2, [r3, #0]

}
 80003a6:	bf00      	nop
 80003a8:	3714      	adds	r7, #20
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd90      	pop	{r4, r7, pc}

080003ae <MCAL_GPIO_WritePin>:
 *
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOX, uint16_t PinNummber , uint8_t value)
{
 80003ae:	b480      	push	{r7}
 80003b0:	b083      	sub	sp, #12
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	460b      	mov	r3, r1
 80003b8:	807b      	strh	r3, [r7, #2]
 80003ba:	4613      	mov	r3, r2
 80003bc:	707b      	strb	r3, [r7, #1]
	if( value  != ( uint32_t)GPIO_PIN_set )
 80003be:	787b      	ldrb	r3, [r7, #1]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d003      	beq.n	80003cc <MCAL_GPIO_WritePin+0x1e>
	{
		//		GPIOX->ODR &= ~(PinNummber);
		GPIOX->BRR = (uint32_t)PinNummber;
 80003c4:	887a      	ldrh	r2, [r7, #2]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	615a      	str	r2, [r3, #20]
	{
		//			GPIOX->ODR |= 	(PinNummber);
		GPIOX->BSRR = (uint32_t)PinNummber;

	}
}
 80003ca:	e002      	b.n	80003d2 <MCAL_GPIO_WritePin+0x24>
		GPIOX->BSRR = (uint32_t)PinNummber;
 80003cc:	887a      	ldrh	r2, [r7, #2]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	611a      	str	r2, [r3, #16]
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <MCAL_GPIO_WritePort>:
 * @param [in] 	- value
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOX, uint16_t value)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	807b      	strh	r3, [r7, #2]
	GPIOX->ODR = value;
 80003e8:	887a      	ldrh	r2, [r7, #2]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	60da      	str	r2, [r3, #12]
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <delay_ms>:
#include "lcd.h"

GPIO_PinConfig_t PinCfg ;


void delay_ms(uint32_t time) {
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	e00b      	b.n	800041e <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 8000406:	2300      	movs	r3, #0
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	e002      	b.n	8000412 <delay_ms+0x1a>
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	3301      	adds	r3, #1
 8000410:	60bb      	str	r3, [r7, #8]
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	2bfe      	cmp	r3, #254	; 0xfe
 8000416:	d9f9      	bls.n	800040c <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	3301      	adds	r3, #1
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	429a      	cmp	r2, r3
 8000424:	d3ef      	bcc.n	8000406 <delay_ms+0xe>
			;
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_switch;
 8000434:	4b52      	ldr	r3, [pc, #328]	; (8000580 <LCD_GPIO_init+0x150>)
 8000436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800043a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800043c:	4b50      	ldr	r3, [pc, #320]	; (8000580 <LCD_GPIO_init+0x150>)
 800043e:	2204      	movs	r2, #4
 8000440:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPPIO_SPEED_10M;
 8000442:	4b4f      	ldr	r3, [pc, #316]	; (8000580 <LCD_GPIO_init+0x150>)
 8000444:	2201      	movs	r2, #1
 8000446:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &PinCfg);
 8000448:	494d      	ldr	r1, [pc, #308]	; (8000580 <LCD_GPIO_init+0x150>)
 800044a:	484e      	ldr	r0, [pc, #312]	; (8000584 <LCD_GPIO_init+0x154>)
 800044c:	f7ff ff32 	bl	80002b4 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_switch;
 8000450:	4b4b      	ldr	r3, [pc, #300]	; (8000580 <LCD_GPIO_init+0x150>)
 8000452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000456:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000458:	4b49      	ldr	r3, [pc, #292]	; (8000580 <LCD_GPIO_init+0x150>)
 800045a:	2204      	movs	r2, #4
 800045c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPPIO_SPEED_10M;
 800045e:	4b48      	ldr	r3, [pc, #288]	; (8000580 <LCD_GPIO_init+0x150>)
 8000460:	2201      	movs	r2, #1
 8000462:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &PinCfg);
 8000464:	4946      	ldr	r1, [pc, #280]	; (8000580 <LCD_GPIO_init+0x150>)
 8000466:	4847      	ldr	r0, [pc, #284]	; (8000584 <LCD_GPIO_init+0x154>)
 8000468:	f7ff ff24 	bl	80002b4 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = ENABLE_switch;
 800046c:	4b44      	ldr	r3, [pc, #272]	; (8000580 <LCD_GPIO_init+0x150>)
 800046e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000472:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000474:	4b42      	ldr	r3, [pc, #264]	; (8000580 <LCD_GPIO_init+0x150>)
 8000476:	2204      	movs	r2, #4
 8000478:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPPIO_SPEED_10M;
 800047a:	4b41      	ldr	r3, [pc, #260]	; (8000580 <LCD_GPIO_init+0x150>)
 800047c:	2201      	movs	r2, #1
 800047e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &PinCfg);
 8000480:	493f      	ldr	r1, [pc, #252]	; (8000580 <LCD_GPIO_init+0x150>)
 8000482:	4840      	ldr	r0, [pc, #256]	; (8000584 <LCD_GPIO_init+0x154>)
 8000484:	f7ff ff16 	bl	80002b4 <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = D0;
 8000488:	4b3d      	ldr	r3, [pc, #244]	; (8000580 <LCD_GPIO_init+0x150>)
 800048a:	2201      	movs	r2, #1
 800048c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800048e:	4b3c      	ldr	r3, [pc, #240]	; (8000580 <LCD_GPIO_init+0x150>)
 8000490:	2204      	movs	r2, #4
 8000492:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPPIO_SPEED_10M;
 8000494:	4b3a      	ldr	r3, [pc, #232]	; (8000580 <LCD_GPIO_init+0x150>)
 8000496:	2201      	movs	r2, #1
 8000498:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &PinCfg);
 800049a:	4939      	ldr	r1, [pc, #228]	; (8000580 <LCD_GPIO_init+0x150>)
 800049c:	4839      	ldr	r0, [pc, #228]	; (8000584 <LCD_GPIO_init+0x154>)
 800049e:	f7ff ff09 	bl	80002b4 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D1;
 80004a2:	4b37      	ldr	r3, [pc, #220]	; (8000580 <LCD_GPIO_init+0x150>)
 80004a4:	2202      	movs	r2, #2
 80004a6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	4b35      	ldr	r3, [pc, #212]	; (8000580 <LCD_GPIO_init+0x150>)
 80004aa:	2204      	movs	r2, #4
 80004ac:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPPIO_SPEED_10M;
 80004ae:	4b34      	ldr	r3, [pc, #208]	; (8000580 <LCD_GPIO_init+0x150>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &PinCfg);
 80004b4:	4932      	ldr	r1, [pc, #200]	; (8000580 <LCD_GPIO_init+0x150>)
 80004b6:	4833      	ldr	r0, [pc, #204]	; (8000584 <LCD_GPIO_init+0x154>)
 80004b8:	f7ff fefc 	bl	80002b4 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D2;
 80004bc:	4b30      	ldr	r3, [pc, #192]	; (8000580 <LCD_GPIO_init+0x150>)
 80004be:	2204      	movs	r2, #4
 80004c0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	4b2f      	ldr	r3, [pc, #188]	; (8000580 <LCD_GPIO_init+0x150>)
 80004c4:	2204      	movs	r2, #4
 80004c6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPPIO_SPEED_10M;
 80004c8:	4b2d      	ldr	r3, [pc, #180]	; (8000580 <LCD_GPIO_init+0x150>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &PinCfg);
 80004ce:	492c      	ldr	r1, [pc, #176]	; (8000580 <LCD_GPIO_init+0x150>)
 80004d0:	482c      	ldr	r0, [pc, #176]	; (8000584 <LCD_GPIO_init+0x154>)
 80004d2:	f7ff feef 	bl	80002b4 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D3;
 80004d6:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <LCD_GPIO_init+0x150>)
 80004d8:	2208      	movs	r2, #8
 80004da:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	4b28      	ldr	r3, [pc, #160]	; (8000580 <LCD_GPIO_init+0x150>)
 80004de:	2204      	movs	r2, #4
 80004e0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPPIO_SPEED_10M;
 80004e2:	4b27      	ldr	r3, [pc, #156]	; (8000580 <LCD_GPIO_init+0x150>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &PinCfg);
 80004e8:	4925      	ldr	r1, [pc, #148]	; (8000580 <LCD_GPIO_init+0x150>)
 80004ea:	4826      	ldr	r0, [pc, #152]	; (8000584 <LCD_GPIO_init+0x154>)
 80004ec:	f7ff fee2 	bl	80002b4 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D4;
 80004f0:	4b23      	ldr	r3, [pc, #140]	; (8000580 <LCD_GPIO_init+0x150>)
 80004f2:	2210      	movs	r2, #16
 80004f4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80004f6:	4b22      	ldr	r3, [pc, #136]	; (8000580 <LCD_GPIO_init+0x150>)
 80004f8:	2204      	movs	r2, #4
 80004fa:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPPIO_SPEED_10M;
 80004fc:	4b20      	ldr	r3, [pc, #128]	; (8000580 <LCD_GPIO_init+0x150>)
 80004fe:	2201      	movs	r2, #1
 8000500:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &PinCfg);
 8000502:	491f      	ldr	r1, [pc, #124]	; (8000580 <LCD_GPIO_init+0x150>)
 8000504:	481f      	ldr	r0, [pc, #124]	; (8000584 <LCD_GPIO_init+0x154>)
 8000506:	f7ff fed5 	bl	80002b4 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D5;
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <LCD_GPIO_init+0x150>)
 800050c:	2220      	movs	r2, #32
 800050e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <LCD_GPIO_init+0x150>)
 8000512:	2204      	movs	r2, #4
 8000514:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPPIO_SPEED_10M;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <LCD_GPIO_init+0x150>)
 8000518:	2201      	movs	r2, #1
 800051a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &PinCfg);
 800051c:	4918      	ldr	r1, [pc, #96]	; (8000580 <LCD_GPIO_init+0x150>)
 800051e:	4819      	ldr	r0, [pc, #100]	; (8000584 <LCD_GPIO_init+0x154>)
 8000520:	f7ff fec8 	bl	80002b4 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D6;
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <LCD_GPIO_init+0x150>)
 8000526:	2240      	movs	r2, #64	; 0x40
 8000528:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <LCD_GPIO_init+0x150>)
 800052c:	2204      	movs	r2, #4
 800052e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPPIO_SPEED_10M;
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <LCD_GPIO_init+0x150>)
 8000532:	2201      	movs	r2, #1
 8000534:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &PinCfg);
 8000536:	4912      	ldr	r1, [pc, #72]	; (8000580 <LCD_GPIO_init+0x150>)
 8000538:	4812      	ldr	r0, [pc, #72]	; (8000584 <LCD_GPIO_init+0x154>)
 800053a:	f7ff febb 	bl	80002b4 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D7;
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <LCD_GPIO_init+0x150>)
 8000540:	2280      	movs	r2, #128	; 0x80
 8000542:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <LCD_GPIO_init+0x150>)
 8000546:	2204      	movs	r2, #4
 8000548:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPPIO_SPEED_10M;
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <LCD_GPIO_init+0x150>)
 800054c:	2201      	movs	r2, #1
 800054e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL_PORT, &PinCfg);
 8000550:	490b      	ldr	r1, [pc, #44]	; (8000580 <LCD_GPIO_init+0x150>)
 8000552:	480c      	ldr	r0, [pc, #48]	; (8000584 <LCD_GPIO_init+0x154>)
 8000554:	f7ff feae 	bl	80002b4 <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, ENABLE_switch, GPIO_PIN_reset);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055e:	4809      	ldr	r0, [pc, #36]	; (8000584 <LCD_GPIO_init+0x154>)
 8000560:	f7ff ff25 	bl	80003ae <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, RS_switch, GPIO_PIN_reset);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <LCD_GPIO_init+0x154>)
 800056c:	f7ff ff1f 	bl	80003ae <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, RW_switch, GPIO_PIN_reset);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	4803      	ldr	r0, [pc, #12]	; (8000584 <LCD_GPIO_init+0x154>)
 8000578:	f7ff ff19 	bl	80003ae <MCAL_GPIO_WritePin>

}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	2000001c 	.word	0x2000001c
 8000584:	40010800 	.word	0x40010800

08000588 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR);
 800058c:	2001      	movs	r0, #1
 800058e:	f000 f833 	bl	80005f8 <LCD_WRITE_COMMAND>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, ENABLE_switch, GPIO_PIN_set);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a2:	4807      	ldr	r0, [pc, #28]	; (80005c0 <LCD_lcd_kick+0x28>)
 80005a4:	f7ff ff03 	bl	80003ae <MCAL_GPIO_WritePin>
	delay_ms(50);
 80005a8:	2032      	movs	r0, #50	; 0x32
 80005aa:	f7ff ff25 	bl	80003f8 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, ENABLE_switch, GPIO_PIN_reset);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <LCD_lcd_kick+0x28>)
 80005b6:	f7ff fefa 	bl	80003ae <MCAL_GPIO_WritePin>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40010800 	.word	0x40010800

080005c4 <LCD_INIT>:
			LCD_WRITE_COMMAND(LCD_CRUSOR_SECOND_ROW + position);
		}
	}
}

void LCD_INIT() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

	delay_ms(20);
 80005c8:	2014      	movs	r0, #20
 80005ca:	f7ff ff15 	bl	80003f8 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 80005ce:	f7ff ff2f 	bl	8000430 <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 80005d2:	200f      	movs	r0, #15
 80005d4:	f7ff ff10 	bl	80003f8 <delay_ms>

	LCD_clear_screen();
 80005d8:	f7ff ffd6 	bl	8000588 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8bits_2lines);
 80005dc:	2038      	movs	r0, #56	; 0x38
 80005de:	f000 f80b 	bl	80005f8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80005e2:	2006      	movs	r0, #6
 80005e4:	f000 f808 	bl	80005f8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CRUSOR_FIRST_ROW);
 80005e8:	2080      	movs	r0, #128	; 0x80
 80005ea:	f000 f805 	bl	80005f8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISPLAY_CRUSOR_BLINK);
 80005ee:	200f      	movs	r0, #15
 80005f0:	f000 f802 	bl	80005f8 <LCD_WRITE_COMMAND>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, RW_switch, GPIO_PIN_reset);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL_PORT, command);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	b29b      	uxth	r3, r3
 8000606:	4619      	mov	r1, r3
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <LCD_WRITE_COMMAND+0x40>)
 800060a:	f7ff fee7 	bl	80003dc <MCAL_GPIO_WritePort>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, RW_switch, GPIO_PIN_reset);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000614:	4808      	ldr	r0, [pc, #32]	; (8000638 <LCD_WRITE_COMMAND+0x40>)
 8000616:	f7ff feca 	bl	80003ae <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, RS_switch, GPIO_PIN_reset);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <LCD_WRITE_COMMAND+0x40>)
 8000622:	f7ff fec4 	bl	80003ae <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 8000626:	2001      	movs	r0, #1
 8000628:	f7ff fee6 	bl	80003f8 <delay_ms>
	LCD_lcd_kick();
 800062c:	f7ff ffb4 	bl	8000598 <LCD_lcd_kick>

}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40010800 	.word	0x40010800

0800063c <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(LCD_CTRL_PORT, character);
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	b29b      	uxth	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	480b      	ldr	r0, [pc, #44]	; (800067c <LCD_WRITE_CHAR+0x40>)
 800064e:	f7ff fec5 	bl	80003dc <MCAL_GPIO_WritePort>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, RW_switch, GPIO_PIN_reset);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <LCD_WRITE_CHAR+0x40>)
 800065a:	f7ff fea8 	bl	80003ae <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, RS_switch, GPIO_PIN_set);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <LCD_WRITE_CHAR+0x40>)
 8000666:	f7ff fea2 	bl	80003ae <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 800066a:	2001      	movs	r0, #1
 800066c:	f7ff fec4 	bl	80003f8 <delay_ms>
	LCD_lcd_kick();
 8000670:	f7ff ff92 	bl	8000598 <LCD_lcd_kick>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40010800 	.word	0x40010800

08000680 <__libc_init_array>:
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	2500      	movs	r5, #0
 8000684:	4e0c      	ldr	r6, [pc, #48]	; (80006b8 <__libc_init_array+0x38>)
 8000686:	4c0d      	ldr	r4, [pc, #52]	; (80006bc <__libc_init_array+0x3c>)
 8000688:	1ba4      	subs	r4, r4, r6
 800068a:	10a4      	asrs	r4, r4, #2
 800068c:	42a5      	cmp	r5, r4
 800068e:	d109      	bne.n	80006a4 <__libc_init_array+0x24>
 8000690:	f000 f81a 	bl	80006c8 <_init>
 8000694:	2500      	movs	r5, #0
 8000696:	4e0a      	ldr	r6, [pc, #40]	; (80006c0 <__libc_init_array+0x40>)
 8000698:	4c0a      	ldr	r4, [pc, #40]	; (80006c4 <__libc_init_array+0x44>)
 800069a:	1ba4      	subs	r4, r4, r6
 800069c:	10a4      	asrs	r4, r4, #2
 800069e:	42a5      	cmp	r5, r4
 80006a0:	d105      	bne.n	80006ae <__libc_init_array+0x2e>
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006a8:	4798      	blx	r3
 80006aa:	3501      	adds	r5, #1
 80006ac:	e7ee      	b.n	800068c <__libc_init_array+0xc>
 80006ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006b2:	4798      	blx	r3
 80006b4:	3501      	adds	r5, #1
 80006b6:	e7f2      	b.n	800069e <__libc_init_array+0x1e>
 80006b8:	080006e0 	.word	0x080006e0
 80006bc:	080006e0 	.word	0x080006e0
 80006c0:	080006e0 	.word	0x080006e0
 80006c4:	080006e4 	.word	0x080006e4

080006c8 <_init>:
 80006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ca:	bf00      	nop
 80006cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ce:	bc08      	pop	{r3}
 80006d0:	469e      	mov	lr, r3
 80006d2:	4770      	bx	lr

080006d4 <_fini>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	bf00      	nop
 80006d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006da:	bc08      	pop	{r3}
 80006dc:	469e      	mov	lr, r3
 80006de:	4770      	bx	lr
