
Atmega32_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab2  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000777  00000000  00000000  00000d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000845  00000000  00000000  000014d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00001d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000050c2  00000000  00000000  00001e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000290  00000000  00000000  00006efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000718a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000003f3  00000000  00000000  00007202  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	00 00       	nop
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	00 00       	nop
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	00 00       	nop
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	00 00       	nop
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	00 00       	nop
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	00 00       	nop
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	00 00       	nop
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	00 00       	nop
  30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
  32:	00 00       	nop
  34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
  3e:	00 00       	nop
  40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
  42:	00 00       	nop
  44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
  46:	00 00       	nop
  48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
  4e:	00 00       	nop
  50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	52 d0       	rcall	.+164    	; 0x11c <main>
  78:	63 c0       	rjmp	.+198    	; 0x140 <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <MCAL_GPIO_Init>:
 */ 
#include "GPIO.h"



void MCAL_GPIO_Init(uint8_t *PORT, GPIO_PinConfig_t *Pin_Config){
  7c:	db 01       	movw	r26, r22
	
	switch(Pin_Config ->mode)
  7e:	11 96       	adiw	r26, 0x01	; 1
  80:	2c 91       	ld	r18, X
  82:	11 97       	sbiw	r26, 0x01	; 1
  84:	21 30       	cpi	r18, 0x01	; 1
  86:	89 f0       	breq	.+34     	; 0xaa <MCAL_GPIO_Init+0x2e>
  88:	18 f0       	brcs	.+6      	; 0x90 <MCAL_GPIO_Init+0x14>
  8a:	22 30       	cpi	r18, 0x02	; 2
  8c:	d9 f0       	breq	.+54     	; 0xc4 <MCAL_GPIO_Init+0x48>
  8e:	08 95       	ret
	{
		case (GPIO_MODE_INPUT_FLO) :
			*(volatile uint8_t*)(PORT-1) &= ~ (Pin_Config->Pin_Number);		//DDR
  90:	fc 01       	movw	r30, r24
  92:	32 91       	ld	r19, -Z
  94:	2c 91       	ld	r18, X
  96:	20 95       	com	r18
  98:	23 23       	and	r18, r19
  9a:	20 83       	st	Z, r18
			*(volatile uint8_t*)(PORT) &= ~ (Pin_Config->Pin_Number);		//
  9c:	fc 01       	movw	r30, r24
  9e:	30 81       	ld	r19, Z
  a0:	2c 91       	ld	r18, X
  a2:	20 95       	com	r18
  a4:	23 23       	and	r18, r19
  a6:	20 83       	st	Z, r18
			

		break;
  a8:	08 95       	ret
		
		case (GPIO_MODE_INPUT_PU) :
			*(volatile uint8_t*)(PORT-1) &= ~ (Pin_Config->Pin_Number);
  aa:	fc 01       	movw	r30, r24
  ac:	32 91       	ld	r19, -Z
  ae:	2c 91       	ld	r18, X
  b0:	20 95       	com	r18
  b2:	23 23       	and	r18, r19
  b4:	20 83       	st	Z, r18
			*(volatile uint8_t*)(PORT) &= ~ (Pin_Config->Pin_Number);
  b6:	fc 01       	movw	r30, r24
  b8:	30 81       	ld	r19, Z
  ba:	2c 91       	ld	r18, X
  bc:	20 95       	com	r18
  be:	23 23       	and	r18, r19
  c0:	20 83       	st	Z, r18

		break;
  c2:	08 95       	ret
		
		case (GPIO_MODE_OUTPUT) :
			*(volatile uint8_t*)(PORT-1) |= Pin_Config->Pin_Number;
  c4:	fc 01       	movw	r30, r24
  c6:	92 91       	ld	r25, -Z
  c8:	8c 91       	ld	r24, X
  ca:	89 2b       	or	r24, r25
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <SPI_Master_Init>:
	SPI_SPCR &= ~(1<<4);
	
		//Enable SPI
		SPI_SPCR |= 1<<6;

}
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	d0 e0       	ldi	r29, 0x00	; 0
  da:	80 e2       	ldi	r24, 0x20	; 32
  dc:	88 83       	st	Y, r24
  de:	12 e0       	ldi	r17, 0x02	; 2
  e0:	19 83       	std	Y+1, r17	; 0x01
  e2:	be 01       	movw	r22, r28
  e4:	88 e3       	ldi	r24, 0x38	; 56
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	c9 df       	rcall	.-110    	; 0x7c <MCAL_GPIO_Init>
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	88 83       	st	Y, r24
  ee:	19 83       	std	Y+1, r17	; 0x01
  f0:	be 01       	movw	r22, r28
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	c2 df       	rcall	.-124    	; 0x7c <MCAL_GPIO_Init>
  f8:	80 e1       	ldi	r24, 0x10	; 16
  fa:	88 83       	st	Y, r24
  fc:	19 83       	std	Y+1, r17	; 0x01
  fe:	be 01       	movw	r22, r28
 100:	88 e3       	ldi	r24, 0x38	; 56
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	bb df       	rcall	.-138    	; 0x7c <MCAL_GPIO_Init>
 106:	68 9a       	sbi	0x0d, 0	; 13
 108:	6c 9a       	sbi	0x0d, 4	; 13
 10a:	6e 9a       	sbi	0x0d, 6	; 13
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	08 95       	ret

00000114 <SPI_Master_Transmit>:


uint8_t SPI_Master_Transmit(uint8_t data)
{
	SPI_SPDR = data;
 114:	8f b9       	out	0x0f, r24	; 15
	while( (!SPI_SPSR & 1<<7) != 0);
 116:	8e b1       	in	r24, 0x0e	; 14
	return SPI_SPDR;
 118:	8f b1       	in	r24, 0x0f	; 15
}
 11a:	08 95       	ret

0000011c <main>:
#include "SPI.h"


int main (void)
{ 
	SPI_Master_Init();
 11c:	d9 df       	rcall	.-78     	; 0xd0 <SPI_Master_Init>
	GPIO_DDRA = 0xFF;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	8a bb       	out	0x1a, r24	; 26
	uint8_t data;
	for (data=0; data<= 255; data++)
 122:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f e3       	ldi	r18, 0x3F	; 63
 126:	8d e0       	ldi	r24, 0x0D	; 13
 128:	93 e0       	ldi	r25, 0x03	; 3
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0xe>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x18>
 134:	00 00       	nop
	{
		_delay_ms(1000);
		 GPIO_PORTA = SPI_Master_Transmit(data) ;
 136:	8c 2f       	mov	r24, r28
 138:	ed df       	rcall	.-38     	; 0x114 <SPI_Master_Transmit>
 13a:	8b bb       	out	0x1b, r24	; 27
int main (void)
{ 
	SPI_Master_Init();
	GPIO_DDRA = 0xFF;
	uint8_t data;
	for (data=0; data<= 255; data++)
 13c:	cf 5f       	subi	r28, 0xFF	; 255
 13e:	f2 cf       	rjmp	.-28     	; 0x124 <main+0x8>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
