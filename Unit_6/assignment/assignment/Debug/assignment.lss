
assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  000001d2  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  000002d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009bf  00000000  00000000  0000030f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000592  00000000  00000000  00000cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000306  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000196  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002d3  00000000  00000000  0000178e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001f0  000001f0  000002a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000070  000000ae  000000ae  00000162  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_1 00000046  0000011e  0000011e  000001d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_2 00000046  00000164  00000164  00000218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_3 00000046  000001aa  000001aa  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.state    00000001  00800060  00800060  000002a8  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_1>
   8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_2>
   c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_3>
  10:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  14:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  18:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  1c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  20:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  24:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  28:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  2c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  30:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  34:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  38:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  3c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  40:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  44:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  48:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  4c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>
  50:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 61       	ori	r16, 0x10	; 16
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 57 00 	call	0xae	; 0xae <_etext>
  a6:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

000001f0 <__bad_interrupt>:
 1f0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000ae <main>:

uint8_t state=0;
int main(void)
{
	/* Replace with your application code */
	DDRC |= (15<<PC0);
  ae:	84 b3       	in	r24, 0x14	; 20
  b0:	8f 60       	ori	r24, 0x0F	; 15
  b2:	84 bb       	out	0x14, r24	; 20
	PORTC&=~(15<<PC0);
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	85 bb       	out	0x15, r24	; 21

	MCUCR |= (1<<ISC01);
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
  c0:	8b b7       	in	r24, 0x3b	; 59
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8b bf       	out	0x3b, r24	; 59
	SREG |=(1<<PC7);
  c6:	8f b7       	in	r24, 0x3f	; 63
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	8f bf       	out	0x3f, r24	; 63

	DDRD &=~(1<<PD2);
  cc:	81 b3       	in	r24, 0x11	; 17
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	81 bb       	out	0x11, r24	; 17
	PORTD |=(1<<PD2);
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	82 bb       	out	0x12, r24	; 18
	
	// set INT0 ANY CAHANGE and INT1 for raising
	MCUCR |= 0b01101<<0;
  d8:	85 b7       	in	r24, 0x35	; 53
  da:	8d 60       	ori	r24, 0x0D	; 13
  dc:	85 bf       	out	0x35, r24	; 53
	
	// set INT2 for falling 
	MCUCSR &= ~(0<<6);
  de:	84 b7       	in	r24, 0x34	; 52
  e0:	84 bf       	out	0x34, r24	; 52
	// Enable INT0,1,2
	GICR |= 0b111<<5;
  e2:	8b b7       	in	r24, 0x3b	; 59
  e4:	80 6e       	ori	r24, 0xE0	; 224
  e6:	8b bf       	out	0x3b, r24	; 59
	
	// global interrupt enable
	SREG |= 1<<7;
  e8:	8f b7       	in	r24, 0x3f	; 63
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	8f bf       	out	0x3f, r24	; 63
	
	
	sei();
  ee:	78 94       	sei
	while (1)
	{
		if (state==1)
  f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f e3       	ldi	r18, 0x3F	; 63
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x50>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x5a>
 108:	00 00       	nop
		{
			_delay_ms(1000);
			if (state==1)
 10a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	79 f7       	brne	.-34     	; 0xf0 <main+0x42>
			{
				PORTC--;
 112:	85 b3       	in	r24, 0x15	; 21
 114:	81 50       	subi	r24, 0x01	; 1
 116:	85 bb       	out	0x15, r24	; 21
				state=0;
 118:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 11c:	e9 cf       	rjmp	.-46     	; 0xf0 <main+0x42>

Disassembly of section .text.__vector_1:

0000011e <__vector_1>:
		}
	}
}

ISR(INT0_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
	PORTD |= 1<<7;
 12c:	82 b3       	in	r24, 0x12	; 18
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	82 bb       	out	0x12, r24	; 18
 132:	87 ea       	ldi	r24, 0xA7	; 167
 134:	91 e6       	ldi	r25, 0x61	; 97
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <__vector_1+0x18>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <__vector_1+0x1e>
 13c:	00 00       	nop
	_delay_ms(100);
	PORTD &= ~(1<<7);
 13e:	82 b3       	in	r24, 0x12	; 18
 140:	8f 77       	andi	r24, 0x7F	; 127
 142:	82 bb       	out	0x12, r24	; 18
 144:	87 ea       	ldi	r24, 0xA7	; 167
 146:	91 e6       	ldi	r25, 0x61	; 97
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <__vector_1+0x2a>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <__vector_1+0x30>
 14e:	00 00       	nop
	_delay_ms(100);
	GIFR |= 1<<6;
 150:	8a b7       	in	r24, 0x3a	; 58
 152:	80 64       	ori	r24, 0x40	; 64
 154:	8a bf       	out	0x3a, r24	; 58
	}
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

Disassembly of section .text.__vector_2:

00000164 <__vector_2>:



ISR(INT1_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
	PORTD |= 1<<7;
 172:	82 b3       	in	r24, 0x12	; 18
 174:	80 68       	ori	r24, 0x80	; 128
 176:	82 bb       	out	0x12, r24	; 18
 178:	87 ea       	ldi	r24, 0xA7	; 167
 17a:	91 e6       	ldi	r25, 0x61	; 97
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <__vector_2+0x18>
 180:	00 c0       	rjmp	.+0      	; 0x182 <__vector_2+0x1e>
 182:	00 00       	nop
	_delay_ms(100);
	PORTD &= ~(1<<7);
 184:	82 b3       	in	r24, 0x12	; 18
 186:	8f 77       	andi	r24, 0x7F	; 127
 188:	82 bb       	out	0x12, r24	; 18
 18a:	87 ea       	ldi	r24, 0xA7	; 167
 18c:	91 e6       	ldi	r25, 0x61	; 97
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <__vector_2+0x2a>
 192:	00 c0       	rjmp	.+0      	; 0x194 <__vector_2+0x30>
 194:	00 00       	nop
	_delay_ms(100);
	GIFR |= 1<<7;
 196:	8a b7       	in	r24, 0x3a	; 58
 198:	80 68       	ori	r24, 0x80	; 128
 19a:	8a bf       	out	0x3a, r24	; 58
}
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

Disassembly of section .text.__vector_3:

000001aa <__vector_3>:


ISR(INT2_vect)
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
	PORTD |= 1<<7;
 1b8:	82 b3       	in	r24, 0x12	; 18
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	82 bb       	out	0x12, r24	; 18
 1be:	87 ea       	ldi	r24, 0xA7	; 167
 1c0:	91 e6       	ldi	r25, 0x61	; 97
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <__vector_3+0x18>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <__vector_3+0x1e>
 1c8:	00 00       	nop
	_delay_ms(100);
	PORTD &= ~(1<<7);
 1ca:	82 b3       	in	r24, 0x12	; 18
 1cc:	8f 77       	andi	r24, 0x7F	; 127
 1ce:	82 bb       	out	0x12, r24	; 18
 1d0:	87 ea       	ldi	r24, 0xA7	; 167
 1d2:	91 e6       	ldi	r25, 0x61	; 97
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <__vector_3+0x2a>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <__vector_3+0x30>
 1da:	00 00       	nop
	_delay_ms(100);
	GIFR |= 1<<5;
 1dc:	8a b7       	in	r24, 0x3a	; 58
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	8a bf       	out	0x3a, r24	; 58
}
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti
